{"version":3,"sources":["views/Project/PaletteSelector/Cell.module.scss","views/Project/SpriteList/SpriteList.module.scss","views/Project/SpriteEditor/SpriteEditor.module.scss","views/Project/ColorSelector/Cell.module.scss","components/Sprite/Sprite.module.scss","components/Scene/Scene.module.scss","views/Project/PaletteSelector/PaletteSelector.module.scss","views/Project/SceneEditorToolbar/SceneEditorToolbar.module.scss","views/Project/SceneEditorActionbar/SceneEditorActionbar.module.scss","views/Project/SpriteEditorToolbar/SpriteEditorToolbar.module.scss","views/Project/SpriteEditorActionbar/SpriteEditorActionbar.module.scss","views/Project/ColorSelector/ColorSelector.module.scss","components/layout/NavBar.component.jsx","views/Dashboard/Dashboard.component.jsx","data/data.helpers.js","App.constants.js","data/Scene.js","data/Sprite.js","data/Project.js","services/localForage.js","store/projects/allProjects.api.js","components/Sprite/Sprite.component.jsx","components/Scene/Scene.component.jsx","components/Modal/Modal.component.jsx","views/Projects/Project.component.jsx","components/forms/Select.component.jsx","views/Projects/Projects.component.jsx","store/currentProject/currentProject.api.js","store/currentProject/currentProject.slice.js","views/Project/PaletteSelector/Cell.component.jsx","views/Project/PaletteSelector/PaletteSelector.component.jsx","store/currentProject/currentProject.actions.js","store/sceneEditor/sceneEditor.slice.js","views/Project/SceneInfoBar/SceneInfoBar.component.jsx","views/Project/SceneEditorToolbar/SpriteEditorToolbar.component.jsx","store/sceneEditor/sceneEditor.actions.js","views/Project/SceneEditorActionbar/SceneEditorActionbar.component.jsx","store/spriteEditor/spriteEditor.slice.js","views/Project/Sprite/Sprite.component.jsx","views/Project/SceneEditor/Cell.component.jsx","views/Project/SceneEditor/Grid.component.jsx","views/Project/SceneEditor/SceneEditor.component.jsx","views/Project/SpriteList/SpriteList.component.jsx","views/Project/SpriteInfoBar/SpriteInfoBar.component.jsx","views/Project/SpriteEditorToolbar/SpriteEditorToolbar.component.jsx","views/Project/SpriteEditorActionbar/SpriteEditorActionbar.component.jsx","store/spriteEditor/spriteEditor.actions.js","views/Project/SpriteEditor/Cell.component.jsx","views/Project/SpriteEditor/SpriteEditor.component.jsx","views/Project/ColorSelector/Cell.component.jsx","views/Project/ColorSelector/InfoBar.component.jsx","views/Project/ColorSelector/ColorSelector.component.jsx","views/Project/Project.component.jsx","views/Settings/Settings.component.jsx","App.js","store/projects/projects.slice.js","store/store.js","serviceWorker.js","index.js","views/Project/SceneEditor/SceneEditor.module.scss","views/Project/Sprite/Sprite.module.scss"],"names":["module","exports","navigation","name","href","navLinkClasses","activeClassName","className","navLinkClassesMobile","SiteMenu","props","as","open","exact","to","map","item","Button","aria-hidden","Panel","Dashboard","ID","Math","random","toString","substr","PALETTE_LIST","COLOR_KEYS","SCENE_TOOLS","SPRITE_TOOLS","EMPTY_SCENE","height","width","spriteSheet","EMPTY_SPRITE","SPRITE_LIST","Array","fill","EMPTY_PROJECT","id","author","createdDate","updatedDate","palette","scenes","sprites","Scene","gridData","this","Sprite","Project","initializeData","created","Date","now","updated","data","localforage","config","version","description","projectsTable","createInstance","storeName","createProjectInStorage","project","a","setItem","response","readProjectInStorage","projectKey","getItem","projectResponse","updateProjectInStorage","projectId","value","deleteProjectInStorage","removeItem","getAllProjectKeys","keys","getAllProjectsInStorage","projectKeys","index","length","key","push","allProjectsApi","createApi","reducerPath","tagTypes","baseQuery","args","extraOptions","signal","dispatch","getState","then","catch","error","endpoints","builder","createNewProject","mutation","queryFn","invalidatesTags","getAllProjects","query","providesTags","result","Object","type","deleteProject","useCreateNewProjectMutation","useGetAllProjectsQuery","useDeleteProjectMutation","sprite","row","rowIndex","styles","cell","cellIndex","React","memo","scene","Modal","children","isOpen","setIsOpen","confirmHandler","titleText","showConfirmButton","confirmButtonText","showCancelButton","cancelButtonText","cancelButtonRef","useRef","Root","show","Fragment","initialFocus","onClose","Child","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Overlay","Title","onClick","ref","buttonClass","iconClass","onConfirmDelete","useState","isDeleteOpen","setIsDeleteOpen","paletteClass","console","log","classNames","classes","filter","Boolean","join","Select","label","items","onChange","selected","setCurrent","useEffect","Label","Options","Option","active","templates","Projects","newProjectName","setNewProjectName","handleDeleteProjectConfirm","NewProject","htmlFor","placeholder","e","target","currentProjectApi","readProjectById","updateProject","updatedProject","useReadProjectByIdQuery","useUpdateProjectMutation","initialState","currentProjectSlice","createSlice","reducers","setCurrentProject","_","action","payload","setCurrentProjectName","state","setCurrentProjectPalette","updateCurrentProjectSprite","updateCurrentProjectScene","actions","getCurrentProject","currentProject","getCurrentProjectName","getCurrentProjectUpdatedReadable","toLocaleDateString","getCurrentProjectPalette","getCurrentProjectPaletteClass","getCurrentProjectScenesCount","getCurrentProjectSpriteByIndex","Cell","isSelected","cellSelected","PaletteSelector","useDispatch","selectedPalette","useSelector","handlePaletteClick","Promise","resolve","updatePalette","grid","color","selectedTool","selectedScene","selectedSceneIndex","sceneEditorSlice","setCurrentTool","tool","setCurrentScene","setCurrentSceneIndex","sceneIndex","updateCurrentSceneCell","column","flipSceneHorizontal","forEach","reverse","flipSceneVertical","moveSceneLeft","firstCell","shift","moveSceneUp","firstRow","moveSceneRight","lastCell","pop","unshift","moveSceneDown","lastRow","clearSceneSprites","getCurrentTool","sceneEditor","getCurrentScene","getCurrentSceneName","getCurrentSceneIndex","SceneInfoBar","sceneName","projectSceneCount","parseInt","buttonClassesBase","buttonClasses","buttonActiveClasses","iconClasses","SceneEditorToolbar","buttons","icon","sceneEditorToolbar","button","updateScene","updatedScene","buttonAttributes","SceneEditorActionbar","handleClick","buttonAction","handleSceneActionButton","sceneEditorActionbar","selectedColor","selectedSprite","selectedSpriteIndex","spriteEditorSlice","setCurrentColor","setCurrentSprite","setCurrentSpriteIndex","spriteIndex","flipSpriteHorizontal","flipSpriteVertical","moveSpriteUp","moveSpriteRight","moveSpriteDown","moveSpriteLeft","rotateSpriteRight","tempSprite","rotateSpriteLeft","spriteEditor","getCurrentColor","getCurrentSprite","getCurrentSpriteIndex","isDraggable","onDoubleClick","cursor","colIndex","spriteHtml","spriteRow","spriteSelected","style","draggable","onDragStart","event","draggingData","spritePoolIndex","dataTransfer","setData","JSON","stringify","onDragOver","preventDefault","onDrop","passedData","parse","getData","hasValidRow","hasValidColumn","clearData","onMouseDown","cursorType","Grid","sceneGridRow","cellValue","SceneEditor","projectScene","sceneGrid","SpriteList","history","useHistory","useParams","page","amount","getCurrentProjectSpritesPaged","spriteList","spriteListRow","SpriteInfoBar","numericValue","parseString","formattedIndex","SpriteEditorToolbar","spriteEditorToolbar","SpriteEditorActionbar","updatedSprite","handleSpriteActionButton","spriteEditorActionbar","transform","colorKey","mouseIsDown","clickHandler","onMouseEnter","SpriteEditor","projectSprite","mouseDown","setMouseDown","labeledGrid","updateLabeledGrid","updateCellValues","updatedGrid","cellLabelValue","labeledRowIndex","colValue","labeledColIndex","updateSprite","scanForGridRegions","useCallback","groups","westValue","northValue","westLabel","northLabel","min","max","lowestMatchedIndex","findIndex","subSet","has","add","newGroup","Set","processedLabeledGrid","setArray","Cells","spriteGridRow","selectedColorKey","spriteGrid","onMouseLeave","onMouseUp","InfoBar","cellRef","colorHex","setColorHex","colorRgb","setColorRgb","isDarkColor","setIsDarkColor","rgbColor","window","getComputedStyle","current","backgroundColor","hex","chroma","rgb","css","lum","luminance","textColorClass","handleColorClick","projectName","projectUpdatedReadable","projectPaletteClass","Items","Settings","routes","path","component","App","route","projectsSlice","setProjects","projects","projectIndex","p","setProjectPalette","insertProjectScene","updateProjectScene","updateProjectSprite","splice","cloneProject","store","configureStore","middleware","getDefaultMiddleware","concat","logger","reducer","setupListeners","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4b9e8ed3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__3JrJV\",\"cellSelected\":\"Cell_cellSelected__1W3CR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spriteList\":\"SpriteList_spriteList__2lyn2\",\"spriteListRow\":\"SpriteList_spriteListRow__9FoYX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spriteGrid\":\"SpriteEditor_spriteGrid__1q-wX\",\"spriteGridRow\":\"SpriteEditor_spriteGridRow__1lQ88\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__23LI3\",\"cellSelected\":\"Cell_cellSelected__-78BU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Sprite_row__mrC6T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Scene_row__1vFnU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"PaletteSelector_grid__1Ql-x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sceneEditorToolbar\":\"SceneEditorToolbar_sceneEditorToolbar__1LfIE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sceneEditorActionbar\":\"SceneEditorActionbar_sceneEditorActionbar__2bPer\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spriteEditorToolbar\":\"SpriteEditorToolbar_spriteEditorToolbar__1Xxxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spriteEditorActionbar\":\"SpriteEditorActionbar_spriteEditorActionbar__1kl72\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"ColorSelector_grid__znBoB\"};","import React from 'react'\nimport { NavLink } from \"react-router-dom\"\n\nimport { Disclosure } from '@headlessui/react'\nimport { AdjustmentsIcon, ViewGridIcon, MenuIcon, XIcon } from '@heroicons/react/outline'\n\nconst navigation = [\n  { name: 'Dashboard', href: ''},\n  { name: 'Projects', href: '/projects'},\n]\n\nconst navLinkClasses = {\n  activeClassName: 'border-indigo-500 text-gray-900',\n  className: 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium'\n}\n\nconst navLinkClassesMobile = {\n  activeClassName: 'bg-indigo-50 border-indigo-500 text-indigo-700',\n  className: 'border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800 block pl-3 pr-4 py-2 border-l-4 text-base font-medium'\n}\n\nconst SiteMenu = (props) => {\n\n  return (\n    <Disclosure as=\"nav\" className=\"bg-white shadow-sm\">\n      {({ open }) => (\n        <>\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between h-16\">\n              <div className=\"flex\">\n                <div className=\"flex-shrink-0 flex items-center\">\n                  <NavLink\n                    exact\n                    to='/'\n                    activeClassName='text-indigo-500'\n                    className='text-gray-500'\n                  >\n                    <ViewGridIcon className=\"block h-6 w-6\" />\n                  </NavLink>\n                </div>\n                <div className=\"hidden sm:-my-px sm:ml-6 sm:flex sm:space-x-8\">\n                  {navigation.map((item) => (\n                    <NavLink\n                      exact\n                      key={item.name}\n                      to={item.href}\n                      { ...navLinkClasses }\n                    >\n                      {item.name}\n                    </NavLink>\n                  ))}\n                </div>\n              </div>\n              <div className=\"hidden sm:ml-6 sm:flex sm:items-center\">\n                <NavLink\n                  exact\n                  to='/settings'\n                  activeClassName='text-indigo-500'\n                  className='text-gray-500'\n                >\n                  <AdjustmentsIcon className=\"block h-6 w-6\" />\n                </NavLink>\n              </div>\n              <div className=\"-mr-2 flex items-center sm:hidden\">\n                {/* Mobile menu button */}\n                <Disclosure.Button className=\"bg-white inline-flex items-center justify-center p-2 text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                  <span className=\"sr-only\">Open main menu</span>\n                  {open ? (\n                    <XIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\n                  ) : (\n                    <MenuIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\n                  )}\n                </Disclosure.Button>\n              </div>\n            </div>\n          </div>\n\n          <Disclosure.Panel className=\"sm:hidden\">\n            <div className=\"pt-2 pb-3 space-y-1\">\n              {navigation.map((item) => (\n                <NavLink\n                  exact\n                  key={item.name}\n                  to={item.href}\n                  { ...navLinkClassesMobile }\n                >\n                  {item.name}\n                </NavLink>\n              ))}\n              <div>Settings</div>\n            </div>\n          </Disclosure.Panel>\n        </>\n      )}\n    </Disclosure>\n  )\n}\n\nexport default SiteMenu\n","import React from 'react';\n\nconst Dashboard = (props) => {\n\n  return (\n    <div className='class'>Dashboard...</div>\n  );\n}\n\nexport default Dashboard;\n","export const ID = () => {\n  // Math.random should be unique because of its seeding algorithm.\n  // Convert it to base 36 (numbers + letters), and grab the first 9 characters\n  // after the decimal.\n  return Math.random().toString(36).substr(2, 9)\n}\n","export const PALETTE_LIST = [\n  'default',\n  'ff-nes',\n  'sky-high',\n  'brinstar',\n  'brinstar-2',\n]\n\nexport const COLOR_KEYS = [\n  '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15',\n]\n\nexport const SCENE_TOOLS = {\n  MOVE: 'move',\n  STAMP: 'stamp',\n}\n\nexport const SCENE_ACTIONS = {\n  MOVE_LEFT: 'move-left',\n  MOVE_UP: 'move-up',\n  MOVE_RIGHT: 'move-right',\n  MOVE_DOWN: 'move-down',\n  CLEAR_SCENE: 'clear-scene',\n}\n\nexport const SPRITE_TOOLS = {\n  PENCIL: 'pencil',\n  ERASER: 'eraser',\n  FILL: 'fill',\n  COLOR_SAMPLE: 'color-sample',\n}\n\nexport const SPRITE_ACTIONS = {\n  MOVE_COLORS_1: 'move-colors-1',\n  MOVE_COLORS_2: 'move-colors-2',\n  FLIP_HORIZONTAL: 'flip-horizontal',\n  FLIP_VERTICAL: 'flip-vertical',\n  MOVE_LEFT: 'move-left',\n  MOVE_UP: 'move-up',\n  MOVE_RIGHT: 'move-right',\n  MOVE_DOWN: 'move-down',\n}\n\nexport const EMPTY_SCENE = {\n  name: 'new scene',\n  height: 8,\n  width: 8,\n  spriteSheet: [\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n  ],\n}\n\nexport const EMPTY_SPRITE = [\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n]\n\nexport const SPRITE_LIST = new Array(128)\n  .fill(null)\n  .map(() => [\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n  ])\n\nexport const EMPTY_PROJECT = {\n  id: 'init',\n  name: 'init',\n  author: 'init',\n  createdDate: 'date1',//new Date(),\n  updatedDate: 'date2',//new Date(),\n  palette: 'default',\n  scenes: [\n    { ...EMPTY_SCENE },\n  ],\n  sprites: SPRITE_LIST,\n}\n","import { ID } from \"./data.helpers\"\nclass Scene {\n\n  constructor(name, height = 8, width = 8, gridData = null) {\n\n    this.name = name\n    this.id = `sc_${ID()}`\n    this.height = height\n    this.width = width\n    this.spriteSheet = gridData ?? [\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n    ]\n  }\n\n\n\n}\n\nexport default Scene\n","class Sprite {\n\n  constructor(gridData = null) {\n\n    this.spriteSheet = gridData ?? [\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n    ]\n  }\n\n  get data() {\n    return this.spriteSheet\n  }\n}\n\nexport default Sprite\n","import { ID } from \"./data.helpers\"\nimport { PALETTE_LIST } from '../App.constants'\nimport Scene from './Scene'\nimport Sprite from './Sprite'\nclass Project {\n\n  constructor(name) {\n    this.name = name\n    this.initializeData()\n  }\n\n  initializeData() {\n    this.id = `p_${ID()}`\n    this.author = 'sys'\n    this.created = Date.now()\n    this.updated = Date.now()\n    this.palette = PALETTE_LIST[0]\n\n    this.scenes = [\n      { ...new Scene('init scene') }\n    ]\n\n    this.sprites = new Array(256)\n      .fill(null)\n      .map(() => [ ...new Sprite().data ])\n  }\n\n  get data() {\n    return {\n      id: this.id,\n      name: this.name,\n      author: this.author,\n      created: this.created,\n      updated: this.updated,\n      palette: this.palette,\n      scenes: this.scenes,\n      sprites: this.sprites\n    }\n  }\n}\n\nexport default Project\n","import localforage from 'localforage'\n\nconst nameSpace = 'PX'\n\nlocalforage.config({\n  name: nameSpace,\n  version: 1.0,\n  description : 'PX application storage.'\n})\n\nconst projectsTable = localforage.createInstance({\n  name: `${nameSpace}/projects`,\n  storeName: 'projects',\n  description : 'Your PX projects.'\n})\n\nexport const createProjectInStorage = async (project) => {\n\n  try {\n    const response = await projectsTable.setItem(project.id, project)\n    // console.log('setItem > createProjectInStorage', value, response)\n    return response\n  } catch (err) {\n    // console.log(err)\n    return err\n  }\n}\n\nexport const readProjectInStorage = async (projectKey) => {\n  let response = []\n\n  try {\n    const projectResponse = await projectsTable.getItem(projectKey)\n    response = projectResponse\n    // console.log('getSingleProjectInStorage', response)\n  } catch (err) {\n    response = err\n    // console.log('getSingleProjectInStorage error', response)\n  }\n\n  return response\n}\n\nexport const updateProjectInStorage = async (projectId, value) => {\n\n  try {\n    // console.log('updateProjectInStorage executing... ', projectId, value)\n    const response = await projectsTable.setItem(projectId, value)\n    // console.log('setItem > updateProjectInStorage', projectId, value, response)\n    return response\n  } catch (err) {\n    // console.log(err)\n    return err\n  }\n}\n\nexport const deleteProjectInStorage = async (projectId) => {\n\n  try {\n    await projectsTable.removeItem(projectId)\n  } catch (err) {\n    return err\n  }\n\n  return projectId\n}\n\nconst getAllProjectKeys = async () => {\n  let response = []\n\n  try {\n    response = await projectsTable.keys()\n  } catch (err) {\n    response = err\n  }\n\n  return response\n}\n\nexport const getAllProjectsInStorage = async () => {\n  let response = []\n\n  try {\n    const projectKeys = await getAllProjectKeys()\n\n    for (let index = 0; index < projectKeys.length; index++) {\n      const projectResponse = await projectsTable.getItem(projectKeys[index])\n      projectResponse.key = projectKeys[index]\n      response.push(projectResponse)\n    }\n    // console.log('getAllProjectsInStorage', response)\n  } catch (err) {\n    response = err\n    // console.log('getAllProjectsInStorage error', response)\n  }\n\n  return response\n}\n","import { createApi } from '@reduxjs/toolkit/query/react'\n\nimport { createProjectInStorage, getAllProjectsInStorage, deleteProjectInStorage } from '../../services/localForage'\n\nconst customBaseQuery = (\n  args,\n  { signal, dispatch, getState },\n  extraOptions\n) => {\n  return getAllProjectsInStorage()\n    .then(data => ({data}))\n    .catch(error => ({error}))\n}\n\n// Define a service using a base URL and expected endpoints\nexport const allProjectsApi = createApi({\n  reducerPath: 'allProjectsApi',\n  tagTypes: ['Posts'],\n  baseQuery: customBaseQuery,\n  endpoints: (builder) => ({\n    createNewProject: builder.mutation({\n      queryFn: ({ project }) => {\n        return createProjectInStorage(project)\n          .then(data => ({data}))\n          .catch(error => ({error}))\n      },\n      invalidatesTags: ['Posts'],\n    }),\n    getAllProjects: builder.query({\n      query: () => {},\n      providesTags: (result) =>\n        result\n          ? [\n              ...Object.keys(result).map(({ id }) => ({ type: 'Posts', id })),\n              { type: 'Posts', id: 'LIST' },\n            ]\n          : [{ type: 'Posts', id: 'LIST' }],\n    }),\n    deleteProject: builder.mutation({\n      queryFn: ({ projectId }) => {\n        return deleteProjectInStorage(projectId)\n          .then(data => ({data}))\n          .catch(error => ({error}))\n      },\n      invalidatesTags: ['Posts'],\n    }),\n  }),\n})\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\nexport const {\n  useCreateNewProjectMutation,\n  useGetAllProjectsQuery,\n  useDeleteProjectMutation\n} = allProjectsApi\n","import React from 'react'\n\nimport { EMPTY_SPRITE } from '@/App.constants'\n\nimport styles from './Sprite.module.scss'\n\nconst Sprite = ({ sprite }) => {\n\n  if (sprite === null) {\n    sprite = [ ...EMPTY_SPRITE ]\n  }\n\n  return (\n    <div>\n      {sprite.map((row, rowIndex) => (\n        <div key={`${rowIndex}`} className={styles.row}>\n          {row.map((cell, cellIndex) => (\n            <div key={`${rowIndex}_${cellIndex}`} className={`color color--${cell ?? 'none'}`} />\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default React.memo(Sprite)\n","import React from 'react'\n\nimport Sprite from '@components/Sprite/Sprite.component'\n\nimport styles from './Scene.module.scss'\n\nconst Scene = ({ scene, sprites }) => {\n\n  return (\n    <div className='w-full'>\n      {scene.spriteSheet.map((row, rowIndex) => (\n        <div key={`${rowIndex}`} className={styles.row}>\n          {row.map((cell, cellIndex) => {\n            const sprite = cell === null ? null : sprites[cell.id]\n            return <Sprite key={`${rowIndex}_${cellIndex}`} sprite={sprite} />\n          })}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default React.memo(Scene)\n","import { Fragment, useRef } from 'react'\nimport { Dialog, Transition } from '@headlessui/react'\n\nconst Modal = ({\n  children,\n  isOpen,\n  setIsOpen,\n  confirmHandler,\n  titleText,\n  showConfirmButton = true,\n  confirmButtonText,\n  showCancelButton = true,\n  cancelButtonText\n}) => {\n  const cancelButtonRef = useRef(null)\n\n  const onConfirmClick = () => {\n    setIsOpen(false)\n    confirmHandler()\n  }\n\n  return (\n    <Transition.Root show={isOpen} as={Fragment}>\n      <Dialog as='div' className='fixed z-10 inset-0 overflow-y-auto' initialFocus={cancelButtonRef} onClose={() => setIsOpen(false)}>\n        <div className='flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0'>\n          <Transition.Child\n            as={Fragment}\n            enter='ease-out duration-300'\n            enterFrom='opacity-0'\n            enterTo='opacity-100'\n            leave='ease-in duration-200'\n            leaveFrom='opacity-100'\n            leaveTo='opacity-0'\n          >\n            <Dialog.Overlay className='fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity' />\n          </Transition.Child>\n\n          {/* This element is to trick the browser into centering the modal contents. */}\n          <span className='hidden sm:inline-block sm:align-middle sm:h-screen' aria-hidden='true'>\n            &#8203;\n          </span>\n          <Transition.Child\n            as={Fragment}\n            enter='ease-out duration-300'\n            enterFrom='opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95'\n            enterTo='opacity-100 translate-y-0 sm:scale-100'\n            leave='ease-in duration-200'\n            leaveFrom='opacity-100 translate-y-0 sm:scale-100'\n            leaveTo='opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95'\n          >\n            <div className='inline-block align-bottom bg-white px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6'>\n              <div>\n                <div className='mt-3 sm:mt-5'>\n                  <Dialog.Title as='h3' className='text-lg leading-6 font-medium text-gray-900'>\n                    {titleText ?? 'Confirm'}\n                  </Dialog.Title>\n                  <div className='mt-2'>\n                    {children}\n                  </div>\n                </div>\n              </div>\n              <div className='mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense'>\n                {showConfirmButton && (\n                  <button\n                    type='button'\n                    className='w-full inline-flex justify-center border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm'\n                    onClick={onConfirmClick}\n                  >\n                    {confirmButtonText ?? 'Confirm'}\n                  </button>\n                )}\n                {showCancelButton && (\n                  <button\n                    type='button'\n                    className='mt-3 w-full inline-flex justify-center border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm'\n                    ref={cancelButtonRef}\n                    onClick={() => setIsOpen(false)}\n                  >\n                    {cancelButtonText ?? 'Cancel'}\n                  </button>\n                )}\n              </div>\n            </div>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  )\n}\n\nexport default Modal\n","import React, { useState } from 'react'\nimport { NavLink } from 'react-router-dom'\n\nimport { PencilAltIcon, DocumentRemoveIcon, DocumentDuplicateIcon } from '@heroicons/react/outline'\n\nimport Scene from '@components/Scene/Scene.component'\nimport Modal from '@components/Modal/Modal.component'\n\nconst buttonClass = 'relative -mr-px w-0 flex-1 inline-flex items-center justify-center py-2 text-1xs font-medium border border-transparent hover:text-gray-500'\nconst iconClass = 'w-5 h-5 mr-2'\n\nconst Project = ({ project, onConfirmDelete }) => {\n  const [isDeleteOpen, setIsDeleteOpen] = useState(false)\n\n  const scene = project.scenes[0]\n  const sprites = project.sprites\n  const paletteClass = `palette palette--${!project.palette ? 'default' : project.palette}`\n\n  const confirmClickHandler = () => {\n    onConfirmDelete(project.id)\n    setIsDeleteOpen(false)\n  }\n\n  return (\n    <div className={`${paletteClass} col-span-1 flex flex-col text-center bg-white shadow overflow-hidden divide-y divide-gray-200`}>\n      <div className='flex-1 flex flex-col'>\n        <h3 className='mt-6 text-gray-900 text-sm font-medium'>{project.name}</h3>\n        <dl className='mt-1 flex-grow flex flex-col justify-between'>\n          <dt className='sr-only'>Project Name</dt>\n          <dd className='text-gray-500 text-xs'>{project.id}</dd>\n          <dt className='sr-only'>ID</dt>\n          <dd className='mt-3'>\n            <Scene scene={scene} sprites={sprites} />\n          </dd>\n        </dl>\n      </div>\n      <div>\n        <div className='-mt-px flex divide-x divide-gray-200'>\n          <div className='w-0 flex-1 flex'>\n            <NavLink\n              exact\n              to={`/projects/${project.id}/0/0`}\n              className={buttonClass + ' text-gray-700'}\n            >\n              <PencilAltIcon className={iconClass + ' text-gray-700'} aria-hidden='true' />\n              <span>Open</span>\n            </NavLink>\n          </div>\n          <div className='w-0 flex-1 flex'>\n            <button\n              className={buttonClass + ' text-gray-400 cursor-not-allowed'}\n              onClick={() => console.log('add dupe function')}\n            >\n              <DocumentDuplicateIcon className={iconClass + ' text-gray-400'} aria-hidden='true' />\n              <span>Clone</span>\n            </button>\n          </div>\n          <div className='w-0 flex-1 flex'>\n            <button\n              className={buttonClass + ' text-gray-700'}\n              onClick={() => setIsDeleteOpen(true)}\n            >\n              <DocumentRemoveIcon className={iconClass + ' text-gray-700'} aria-hidden='true' />\n              <span>Delete</span>\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <Modal isOpen={isDeleteOpen} setIsOpen={setIsDeleteOpen} confirmHandler={confirmClickHandler}>\n        <form className='bg-white mt-5 sm:flex'>\n          <div className='w-full sm:max-w-xs'>\n            Are you sure you want to delete {project.id}?\n          </div>\n        </form>\n      </Modal>\n    </div>\n  )\n}\n\nexport default Project\n","import { Fragment, useEffect, useState } from 'react'\nimport { Listbox, Transition } from '@headlessui/react'\nimport { CheckIcon, SelectorIcon } from '@heroicons/react/solid'\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(' ')\n}\n\nconst Select = ({\n  label,\n  items,\n  onChange,\n}) => {\n  const [selected, setCurrent] = useState(items[0])\n\n  useEffect(() => {\n    // console.log('selected changed', selected)\n  }, [selected])\n\n  return (\n    <Listbox value={selected} onChange={setCurrent}>\n      <Listbox.Label className='block text-sm font-medium text-gray-700'>{label}</Listbox.Label>\n      <div className='mt-1 relative'>\n        <Listbox.Button className='bg-white relative w-full border border-gray-300 shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm'>\n          <span className='block truncate'>{selected.name}</span>\n          <span className='absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none'>\n            <SelectorIcon className='h-5 w-5 text-gray-400' aria-hidden='true' />\n          </span>\n        </Listbox.Button>\n\n        <Transition as={Fragment} leave='transition ease-in duration-100' leaveFrom='opacity-100' leaveTo='opacity-0'>\n          <Listbox.Options className='absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm'>\n            {items.map((item) => (\n              <Listbox.Option\n                key={item.id}\n                className={({ active }) =>\n                  classNames(\n                    active ? 'text-white bg-indigo-600' : 'text-gray-900',\n                    'cursor-default select-none relative py-2 pl-3 pr-9'\n                  )\n                }\n                value={item}\n              >\n                {({ selected, active }) => (\n                  <>\n                    <span className={classNames(selected ? 'font-semibold' : 'font-normal', 'block truncate')}>\n                      {item.name}\n                    </span>\n\n                    {selected ? (\n                      <span\n                        className={classNames(\n                          active ? 'text-white' : 'text-indigo-600',\n                          'absolute inset-y-0 right-0 flex items-center pr-4'\n                        )}\n                      >\n                        <CheckIcon className='h-5 w-5' aria-hidden='true' />\n                      </span>\n                    ) : null}\n                  </>\n                )}\n              </Listbox.Option>\n            ))}\n          </Listbox.Options>\n        </Transition>\n      </div>\n    </Listbox>\n  )\n}\n\nexport default Select\n","import React, { useState } from 'react'\n\nimport { DocumentAddIcon } from '@heroicons/react/solid'\n\nimport NewProject from '../../data/Project'\nimport { useGetAllProjectsQuery } from '@store/projects/allProjects.api'\nimport { useCreateNewProjectMutation, useDeleteProjectMutation } from '@store/projects/allProjects.api'\nimport Project from './Project.component'\nimport Modal from '@components/Modal/Modal.component'\nimport Select from '@components/forms/Select.component'\n\nconst templates = [\n  {name: 'Empty', id: '001'},\n  {name: 'Basic', id: '002'},\n  {name: 'Faces', id: '003'},\n  {name: 'Board', id: '004'},\n]\n\nconst Projects = (props) => {\n  const { data = [] } = useGetAllProjectsQuery()\n\n  const [\n    createNewProject,\n    // { isLoading: isUpdating }, // This is the destructured mutation result\n  ] = useCreateNewProjectMutation()\n\n  const [\n    deleteProject,\n    // { isLoading: isUpdating }, // This is the destructured mutation result\n  ] = useDeleteProjectMutation()\n\n  const [isOpen, setIsOpen] = useState(false)\n  const [newProjectName, setNewProjectName] = useState('')\n\n  const handleCreateNewProjectConfirm = () => {\n    const { data } = new NewProject(newProjectName)\n    const project = data\n    createNewProject({ project })\n    setNewProjectName('')\n  }\n\n  const handleDeleteProjectConfirm = (projectId) => {\n    deleteProject({ projectId })\n  }\n\n  return (\n    <div>\n      <div className='grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 mb-10'>\n        {data.map((project) => (\n          <Project key={project.id} project={project} onConfirmDelete={handleDeleteProjectConfirm} />\n        ))}\n      </div>\n\n      <button\n        className='inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'\n        type='button'\n        onClick={() => setIsOpen(true)}\n      >\n        <DocumentAddIcon className='w-5 h-5 text-white mr-3' aria-hidden='true' />\n        <span>New</span>\n      </button>\n\n      <Modal isOpen={isOpen} setIsOpen={setIsOpen} confirmHandler={handleCreateNewProjectConfirm}>\n        <form className='bg-white mt-5 sm:flex'>\n          <div className='w-full sm:max-w-xs'>\n            <label htmlFor='new-project-name' className='block text-sm font-medium text-gray-700'>\n              New Project Name\n            </label>\n            <input\n              name='new-project-name'\n              className='shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 mb-2'\n              type='text'\n              placeholder='New Project Name'\n              value={newProjectName}\n              onChange={(e) => setNewProjectName(e.target.value)}\n            />\n            <Select label={'New Project Template'} items={templates} onChange={() => {console.log('changed')}} />\n          </div>\n        </form>\n      </Modal>\n    </div>\n  )\n}\n\nexport default Projects\n","import { createApi } from '@reduxjs/toolkit/query/react'\n\nimport { readProjectInStorage, updateProjectInStorage } from '../../services/localForage'\n\nconst customBaseQuery = (\n  args,\n  { signal, dispatch, getState },\n  extraOptions\n) => {\n  return readProjectInStorage(args)\n    .then(data => ({data}))\n    .catch(error => ({error}))\n}\n\n// Define a service using a base URL and expected endpoints\nexport const currentProjectApi = createApi({\n  reducerPath: 'currentProjectApi',\n  tagTypes: ['Posts'],\n  baseQuery: customBaseQuery,\n  endpoints: (builder) => ({\n    readProjectById: builder.query({\n      query: (projectId) => `${projectId}`,\n      providesTags: (result) =>\n        result\n          ? [\n              ...Object.keys(result).map(({ id }) => ({ type: 'Posts', id })),\n              { type: 'Posts', id: 'LIST' },\n            ]\n          : [{ type: 'Posts', id: 'LIST' }],\n    }),\n    updateProject: builder.mutation({\n      queryFn: ({ projectId, updatedProject }) => {\n        return updateProjectInStorage(projectId, { ...updatedProject, updated: Date.now() })\n          .then(data => ({data}))\n          .catch(error => ({error}))\n      },\n      // TOO intensive. Do not enable cache invalidation here.\n      // invalidatesTags: ['Posts'],\n      // invalidatesTags: (result, error, { palette }) => [{ type: 'Posts', palette }],\n    }),\n  }),\n})\n\n// Export hooks for usage in functional components, which are\n// auto-generated based on the defined endpoints\nexport const { useReadProjectByIdQuery, useUpdateProjectMutation } = currentProjectApi\n","import { createSlice } from '@reduxjs/toolkit'\n\nimport { EMPTY_PROJECT } from '@/App.constants.js'\n\nconst initialState = {\n  ...EMPTY_PROJECT,\n  // id: null,\n  // name: 'DefaultText',\n  // palette: 'default',\n  // dateCreated: null,\n  // updated: null,\n  // dateLastOpened: null,\n  // sprites: [], //1-128|256\n  // scenes: [], //1-128|256\n  // // redoHistory: [], //in steps\n  // // undoHistory: [], //in steps\n}\n\nexport const currentProjectSlice = createSlice({\n  name: 'currentProject',\n  initialState: { ...initialState },\n  reducers: {\n    setCurrentProject(_, action) {\n      const { project } = action.payload\n      return project\n    },\n    setCurrentProjectName(state, action) {\n      const { value } = action.payload\n      state.name = value\n      state.updated = Date.now()\n    },\n    setCurrentProjectPalette(state, action) {\n      const { palette } = action.payload\n      state.palette = palette\n      state.updated = Date.now()\n    },\n    updateCurrentProjectSprite(state, action) {\n      const { index, sprite } = action.payload\n      state.sprites[index] = sprite\n      state.updated = Date.now()\n    },\n    updateCurrentProjectScene(state, action) {\n      const { index, scene } = action.payload\n      state.scenes[index] = scene\n      state.updated = Date.now()\n    },\n  },\n})\n\n// Actions\nexport const {\n  setCurrentProject,\n  setCurrentProjectName,\n  setCurrentProjectPalette,\n  updateCurrentProjectSprite,\n  updateCurrentProjectScene,\n} = currentProjectSlice.actions\n\n// Selectors\nexport const getCurrentProject = (state) => state.currentProject\nexport const getCurrentProjectId = (state) => state.currentProject.id\nexport const getCurrentProjectName = (state) => state.currentProject.name\nexport const getCurrentProjectUpdated = (state) => state.currentProject.updated\nexport const getCurrentProjectUpdatedReadable = (state) => new Date(state.currentProject.updated).toLocaleDateString('en-US')\nexport const getCurrentProjectPalette = (state) => state.currentProject.palette\nexport const getCurrentProjectPaletteClass = (state) => {\n  return `palette palette--${!state.currentProject.palette ? 'default' : state.currentProject.palette}`\n}\nexport const getCurrentProjectScenes = (state) => state.currentProject.scenes\nexport const getCurrentProjectScenesCount = (state) => state.currentProject.scenes.length \nexport const getCurrentProjectScene = (index) => (state) => state.currentProject.scenes[index]\nexport const getCurrentProjectSprites = (state) => state.currentProject.sprites\nexport const getCurrentProjectSpriteByIndex = (index) => (state) => state.currentProject.sprites[index]\nexport const getCurrentProjectSpritesPaged = (page = 1, amount = 16) => (state) => {\n  return state.currentProject.sprites\n    .filter((_, index) => {\n      return index >= 0 && index <= (page * amount) - 1\n    })\n}\n\nexport default currentProjectSlice.reducer\n","import React from 'react';\n\nimport styles from './Cell.module.scss';\n\nconst Cell = (props) => {\n  const {\n    value,\n    isSelected = false,\n    children,\n    onClick,\n  } = props;\n\n  return (\n    <button\n      className={`color color--${value} ${styles.cell}` + (isSelected ? ' ' + styles.cellSelected : '')}\n      onClick={() => onClick(value)}\n    >\n      {children}\n    </button>\n  );\n}\n\nexport default Cell;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { PALETTE_LIST, COLOR_KEYS } from '@/App.constants.js'\nimport { updatePalette } from '@store/currentProject/currentProject.actions'\nimport { getCurrentProjectPalette } from '@store/currentProject/currentProject.slice'\nimport { useUpdateProjectMutation } from '@store/currentProject/currentProject.api'\nimport Cell from './Cell.component'\n\nimport styles from './PaletteSelector.module.scss'\n\nconst PaletteSelector = (props) => {\n  const dispatch = useDispatch()\n  const selectedPalette = useSelector(getCurrentProjectPalette)\n  const [ updateProject ] = useUpdateProjectMutation()\n\n  const handlePaletteClick = palette => {\n    dispatch(updatePalette({ palette }))\n      .then(({ projectId, updatedProject }) => {\n        updateProject({ projectId, updatedProject })\n      })\n  }\n\n  return (\n    <div className='palette-preview'>\n      <div className='flex content-center justify-between p-2 text-xs'>Palette: {selectedPalette}</div>\n      <div className={styles.grid + ' border-t border-gray-100 pt-2'}>\n        {PALETTE_LIST.map(palette => {\n          return (\n            <Cell key={palette} value={palette} isSelected={palette === selectedPalette} onClick={handlePaletteClick} >\n              <div className={`grid grid-cols-4 gap-0 w-full palette palette--${palette}`}>\n                {COLOR_KEYS.map(color => {\n                  return (\n                    <div key={color} className={`color color--${color}`} />\n                  )\n                })}\n              </div>\n            </Cell>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default PaletteSelector\n","import { getCurrentProject, setCurrentProjectPalette } from '../currentProject/currentProject.slice'\n\nexport const updatePalette = ({ palette }) => {\n  return (dispatch, getState) => {\n    const project = getCurrentProject(getState())\n\n    dispatch(setCurrentProjectPalette({ palette }))\n\n    const updatedProject = {\n      ...project,\n      palette: palette,\n      updated: Date.now(),\n    }\n\n    return Promise.resolve({ projectId: project.id, updatedProject })\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nimport { SCENE_TOOLS, EMPTY_SCENE } from '@/App.constants'\n\nconst initialState = {\n  selectedTool: SCENE_TOOLS.MOVE,\n  selectedScene: { ...EMPTY_SCENE },\n  selectedSceneIndex: 0,\n}\n\nexport const sceneEditorSlice = createSlice({\n  name: 'sceneEditor',\n  initialState: { ...initialState },\n  reducers: {\n    setCurrentTool(state, action) {\n      const { tool } = action.payload\n      state.selectedTool = tool\n    },\n    setCurrentScene(state, action) {\n      const { scene } = action.payload\n      state.selectedScene = scene\n    },\n    // TODO do we need? this is handled via params, right?\n    setCurrentSceneIndex(state, action) {\n      const { sceneIndex } = action.payload\n      state.selectedSceneIndex = sceneIndex\n    },\n    updateCurrentSceneCell(state, action) {\n      const { row, column, value } = action.payload\n      state.selectedScene.spriteSheet[row][column] = value\n    },\n\n\n    flipSceneHorizontal(state) {\n      state.selectedScene.spriteSheet.forEach((row, index) => {\n        state.selectedScene.spriteSheet[index] = row.reverse()\n      })\n    },\n    flipSceneVertical(state) {\n      state.selectedScene.spriteSheet.reverse()\n    },\n    moveSceneLeft(state) {\n      state.selectedScene.spriteSheet.forEach(row => {\n        const firstCell = row.shift()\n        row.push(firstCell)\n      })\n    },\n    moveSceneUp(state) {\n      const firstRow = state.selectedScene.spriteSheet.shift()\n      state.selectedScene.spriteSheet.push(firstRow)\n    },\n    moveSceneRight(state) {\n      state.selectedScene.spriteSheet.forEach(row => {\n        const lastCell = row.pop()\n        row.unshift(lastCell)\n      })\n    },\n    moveSceneDown(state) {\n      const lastRow = state.selectedScene.spriteSheet.pop()\n      state.selectedScene.spriteSheet.unshift(lastRow)\n    },\n    clearSceneSprites(state) {\n      state.selectedScene.spriteSheet = state.selectedScene.spriteSheet\n        .map(row => {\n          return row.map(cell => {\n            return null\n          })\n        })\n    }\n  },\n})\n\n// Actions\nexport const {\n  setCurrentTool,\n  setCurrentScene,\n  setCurrentSceneIndex,\n  updateCurrentSceneCell,\n  flipSceneHorizontal,\n  flipSceneVertical,\n  moveSceneLeft,\n  moveSceneUp,\n  moveSceneRight,\n  moveSceneDown,\n  clearSceneSprites,\n} = sceneEditorSlice.actions\n\n// Selectors\nexport const getCurrentTool = (state) => state.sceneEditor.selectedTool\nexport const getCurrentScene = (state) => state.sceneEditor.selectedScene\nexport const getCurrentSceneName = (state) => state.sceneEditor.selectedScene.name\nexport const getCurrentSceneIndex = (state) => state.sceneEditor.selectedSceneIndex\n\nexport default sceneEditorSlice.reducer\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getCurrentProjectScenesCount } from '@store/currentProject/currentProject.slice'\nimport { getCurrentTool, getCurrentSceneName } from '@store/sceneEditor/sceneEditor.slice'\n\nconst SceneInfoBar = ({ sceneIndex }) => {\n  const selectedTool = useSelector(getCurrentTool);\n  const sceneName = useSelector(getCurrentSceneName);\n  const projectSceneCount = useSelector(getCurrentProjectScenesCount)\n\n  return (\n    <div className='flex content-center justify-between p-2 text-xs'>\n      <span>[{parseInt(sceneIndex) + 1}/{projectSceneCount}] {sceneName}</span>\n      <span>{selectedTool} tool</span>\n    </div>\n  )\n}\n\nexport default SceneInfoBar\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { HandIcon, ArrowCircleDownIcon } from '@heroicons/react/outline';\n\nimport { SCENE_TOOLS } from '@/App.constants';\nimport { getCurrentTool, setCurrentTool } from '@store/sceneEditor/sceneEditor.slice';\n\nimport styles from './SceneEditorToolbar.module.scss';\n\nconst buttonClassesBase = 'relative inline-flex items-center px-4 py-2 text-sm font-medium';\nconst buttonClasses = `${buttonClassesBase} text-gray-800 bg-white hover:bg-gray-50`;\nconst buttonActiveClasses = `${buttonClassesBase} text-gray-50 bg-indigo-500 hover:bg-indigo-500 focus:z-10`;\nconst iconClasses = 'block h-5 w-5';\n\nconst SceneEditorToolbar = (props) => {\n  const dispatch = useDispatch();\n  const selectedTool = useSelector(getCurrentTool);\n\n  const buttons = [\n    {tool: SCENE_TOOLS.MOVE, icon: <HandIcon className={iconClasses} />},\n    {tool: SCENE_TOOLS.STAMP, icon: <ArrowCircleDownIcon className={iconClasses} />},\n  ];\n\n  const handleToolClick = tool => dispatch(setCurrentTool({tool}));\n\n  return (\n    <div className={styles.sceneEditorToolbar + ' w-full'}>\n      {buttons.map(button => {\n        return (\n          <button\n            key={button.tool}\n            type=\"button\"\n            className={button.tool === selectedTool ? buttonActiveClasses : buttonClasses}\n            onClick={() => handleToolClick(button.tool)}\n          >\n            {button.icon}\n          </button>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default SceneEditorToolbar;\n","import { getCurrentProject, updateCurrentProjectScene } from '../currentProject/currentProject.slice'\nimport { getCurrentSceneIndex, getCurrentScene, updateCurrentSceneCell } from './sceneEditor.slice'\n\nexport const updateScene = ({ row, column, value }) => {\n  return (dispatch, getState) => {\n    const project = getCurrentProject(getState())\n    const sceneIndex = getCurrentSceneIndex(getState())\n\n    dispatch(updateCurrentSceneCell({ row, column, value }))\n    const updatedScene = getCurrentScene(getState())\n\n    const updatedProject = {\n      ...project,\n      scenes: [\n        ...project.scenes\n      ],\n    }\n    updatedProject.scenes[sceneIndex] = updatedScene\n\n    return Promise.resolve({ projectId: project.id, updatedProject })\n  }\n}\n\nexport const handleSceneActionButton = (buttonAction) => {\n  return (dispatch, getState) => {\n    const project = getCurrentProject(getState())\n    const sceneIndex = getCurrentSceneIndex(getState())\n\n    dispatch(buttonAction()) // See spriteEditor.slice for reducer cases\n    const updatedScene = getCurrentScene(getState())\n    dispatch(updateCurrentProjectScene({ index: sceneIndex, scene: updatedScene }))\n\n    const updatedProject = {\n      ...project,\n      scenes: [\n        ...project.scenes\n      ],\n    }\n    updatedProject.scenes[sceneIndex] = updatedScene\n\n    return Promise.resolve({ projectId: project.id, updatedProject })\n  }\n}\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { SwitchHorizontalIcon, SwitchVerticalIcon, ArrowSmUpIcon, ArrowSmRightIcon, ArrowSmDownIcon, ArrowSmLeftIcon, LightningBoltIcon } from '@heroicons/react/outline'\n\nimport { moveSceneUp, moveSceneRight, moveSceneDown, moveSceneLeft, flipSceneVertical, flipSceneHorizontal, clearSceneSprites } from '@store/sceneEditor/sceneEditor.slice'\nimport { handleSceneActionButton } from '@store/sceneEditor/sceneEditor.actions'\nimport { useUpdateProjectMutation } from '@store/currentProject/currentProject.api'\n\nimport styles from './SceneEditorActionbar.module.scss'\n\nconst buttonClassesBase = 'relative inline-flex items-center px-4 py-2 text-sm font-medium'\nconst buttonClasses = `${buttonClassesBase} text-gray-800 bg-white hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500`\nconst iconClasses = 'block h-5 w-5'\n\nconst buttonAttributes = {\n  type: 'button',\n  className: buttonClasses,\n}\n\nconst SceneEditorActionbar = (props) => {\n  const dispatch = useDispatch()\n  const [ updateProject ] = useUpdateProjectMutation()\n\n  const handleClick = (buttonAction) => {\n    dispatch(handleSceneActionButton(buttonAction))\n      .then(({ projectId, updatedProject }) => {\n        updateProject({ projectId, updatedProject })\n      })\n  }\n\n  return (\n    <div className={styles.sceneEditorActionbar + ' mb-2 w-full'}>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSceneLeft)}>\n        <ArrowSmLeftIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSceneRight)}>\n        <ArrowSmRightIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSceneUp)} >\n        <ArrowSmUpIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSceneDown)}>\n        <ArrowSmDownIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(flipSceneHorizontal)}>\n        <SwitchHorizontalIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(flipSceneVertical)}>\n        <SwitchVerticalIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(clearSceneSprites)}>\n        <LightningBoltIcon className={iconClasses} />\n      </button>\n    </div>\n  )\n}\n\nexport default SceneEditorActionbar\n","import { createSlice } from '@reduxjs/toolkit'\n\nimport { SPRITE_TOOLS, COLOR_KEYS } from '@/App.constants'\n// import { currentProjectApi } from '../currentProject/currentProject.api'\n\nconst initialState = {\n  selectedTool: SPRITE_TOOLS.PENCIL,\n  selectedColor: COLOR_KEYS[0],\n  selectedSprite: [],\n  selectedSpriteIndex: 0,\n}\n\nexport const spriteEditorSlice = createSlice({\n  name: 'spriteEditor',\n  initialState: { ...initialState },\n  reducers: {\n    setCurrentTool(state, action) {\n      const { tool } = action.payload\n      state.selectedTool = tool\n    },\n    setCurrentColor(state, action) {\n      const { color } = action.payload\n      state.selectedColor = color\n    },\n    setCurrentSprite(state, action) {\n      const { sprite } = action.payload\n      state.selectedSprite = sprite\n    },\n    setCurrentSpriteIndex(state, action) {\n      const { spriteIndex } = action.payload\n      state.selectedSpriteIndex = spriteIndex\n    },\n    flipSpriteHorizontal(state) {\n      state.selectedSprite.forEach((row, index) => {\n        state.selectedSprite[index] = row.reverse()\n      })\n    },\n    flipSpriteVertical(state) {\n      state.selectedSprite.reverse()\n    },\n    moveSpriteUp(state) {\n      const firstRow = state.selectedSprite.shift()\n      state.selectedSprite.push(firstRow)\n    },\n    moveSpriteRight(state) {\n      state.selectedSprite.forEach(row => {\n        const lastCell = row.pop()\n        row.unshift(lastCell)\n      })\n    },\n    moveSpriteDown(state) {\n      const lastRow = state.selectedSprite.pop()\n      state.selectedSprite.unshift(lastRow)\n    },\n    moveSpriteLeft(state) {\n      state.selectedSprite.forEach(row => {\n        const firstCell = row.shift()\n        row.push(firstCell)\n      })\n    },\n    rotateSpriteRight(state) {\n      const tempSprite = state.selectedSprite.map(row => ([ ...row.map(cell => cell) ]))\n      state.selectedSprite.forEach((row, rowIndex) => {\n        row.forEach((cell, cellIndex) => {\n          tempSprite[cellIndex][state.selectedSprite.length - rowIndex - 1] = cell\n        })\n      })\n      state.selectedSprite = tempSprite\n    },\n    rotateSpriteLeft(state) {\n      const tempSprite = state.selectedSprite.map(row => ([ ...row.map(cell => cell) ]))\n      state.selectedSprite.forEach((row, rowIndex) => {\n        row.forEach((cell, cellIndex) => {\n          tempSprite[state.selectedSprite.length - cellIndex - 1][rowIndex] = cell\n        })\n      })\n      state.selectedSprite = tempSprite\n    },\n  },\n  // extraReducers: (builder) => {\n  //   builder.addMatcher(\n  //     currentProjectApi.endpoints.readProjectById.matchFulfilled,\n  //     (state, { payload }) => {\n  //       console.log('should do magic here...', payload, state.selectedSpriteIndex)\n  //       // state.selectedSprite = payload.sprite\n  //       // state.selectedSpriteIndex = payload.spriteIndex\n  //     }\n  //   )\n  // },\n})\n\n// Actions\nexport const {\n  setCurrentTool,\n  setCurrentColor,\n  setCurrentSprite,\n  setCurrentSpriteIndex,\n  flipSpriteHorizontal,\n  flipSpriteVertical,\n  moveSpriteLeft,\n  moveSpriteUp,\n  moveSpriteRight,\n  moveSpriteDown,\n  rotateSpriteRight,\n  rotateSpriteLeft,\n} = spriteEditorSlice.actions\n\n// Selectors\nexport const getCurrentTool = (state) => state.spriteEditor.selectedTool\nexport const getCurrentColor = (state) => state.spriteEditor.selectedColor\nexport const getCurrentSprite = (state) => state.spriteEditor.selectedSprite\nexport const getCurrentSpriteIndex = (state) => state.spriteEditor.selectedSpriteIndex\n\nexport default spriteEditorSlice.reducer\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getCurrentProjectSpriteByIndex } from '@store/currentProject/currentProject.slice'\n\nimport styles from './Sprite.module.scss'\n\nconst Sprite = props => {\n  const {\n    spriteIndex,\n    isSelected = false,\n    isDraggable = true,\n    onClick = () => {},\n    onDoubleClick = () => {},\n    cursor = 'default',\n    rowIndex,\n    colIndex,\n  } = props\n\n  const sprite = useSelector(getCurrentProjectSpriteByIndex(spriteIndex))\n\n  const dragStartHandler = event => {\n    const draggingData = {\n      rowIndex,\n      colIndex,\n      sprite,\n      spritePoolIndex: spriteIndex\n    }\n    event.dataTransfer.setData('text/plain', JSON.stringify(draggingData))\n  }\n\n  const dragOverHandler = event => {\n    event.preventDefault()\n  }\n\n  const dropHandler = event => {\n    event.preventDefault()\n  }\n\n  const spriteHtml = sprite\n    .map((row, rowIndex) => (\n      <div key={rowIndex} className={styles.spriteRow}>\n        {row.map((cell, colIndex) => (\n          <div key={colIndex} className={`color color--${cell}`} onClick={() => onClick(spriteIndex)} />\n        ))}\n      </div>\n    ))\n\n  return (\n    <div\n      className={styles.sprite + (isSelected ? ' ' + styles.spriteSelected : '')}\n      style={{ cursor: cursor }}\n      draggable={isDraggable}\n      onDragStart={dragStartHandler}\n      onDragOver={dragOverHandler}\n      onDrop={dropHandler}\n      onDoubleClick={onDoubleClick}\n      onClick={onClick}\n    >\n      {spriteHtml}\n    </div>\n  )\n}\n\nexport default React.memo(Sprite)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { SCENE_TOOLS } from '@/App.constants'\nimport { updateScene } from '@store/sceneEditor/sceneEditor.actions'\nimport { getCurrentSpriteIndex } from '@store/spriteEditor/spriteEditor.slice'\nimport Sprite from '@views/Project/Sprite/Sprite.component'\n\nimport { useUpdateProjectMutation } from '@store/currentProject/currentProject.api'\n\nconst Cell = ({\n  sprite,\n  rowIndex,\n  colIndex,\n  selectedTool,\n}) => {\n  const dispatch = useDispatch()\n  const selectedSpriteIndex = useSelector(getCurrentSpriteIndex)\n\n  const [\n    updateProject, // This is the mutation trigger\n    // { isLoading: isUpdating }, // This is the destructured mutation result\n  ] = useUpdateProjectMutation()\n\n  const dragOverHandler = event => {\n    event.preventDefault()\n  }\n\n  const dropHandler = event => {\n    event.preventDefault()\n    const passedData = JSON.parse(event.dataTransfer.getData('text'))\n\n    dispatch(updateScene({\n      row: rowIndex,\n      column: colIndex,\n      value: {id: passedData.spritePoolIndex},\n    })).then(({ projectId, updatedProject }) => {\n      updateProject({ projectId, updatedProject })\n    })\n\n    const hasValidRow = passedData.rowIndex !== null && passedData.rowIndex >= 0\n    const hasValidColumn = passedData.colIndex !== null && passedData.colIndex >= 0\n\n    // Remove sprite from grid\n    if (hasValidRow && hasValidColumn) {\n      if (rowIndex !== passedData.rowIndex || colIndex !== passedData.colIndex) {\n        dispatch(updateScene({\n          row: passedData.rowIndex,\n          column: passedData.colIndex,\n          value: null,\n        })).then(({ projectId, updatedProject }) => {\n          updateProject({ projectId, updatedProject })\n        })\n      }\n    }\n\n    // TODO Remove sprite from grid if dropped outside of grid\n    // setShowDeleteZone(false)\n    event.dataTransfer.clearData()\n  }\n\n  const cellClickHandler = () => {\n    if (selectedTool === SCENE_TOOLS.STAMP) {\n      // dispatch(updateScene({\n      //   row: rowIndex,\n      //   column: colIndex,\n      //   value: {id: selectedSpriteIndex},\n      // }))\n      dispatch(updateScene({\n        row: rowIndex,\n        column: colIndex,\n        value: {id:selectedSpriteIndex},\n      })).then(({ projectId, updatedProject }) => {\n        updateProject({ projectId, updatedProject })\n      })\n    }\n  }\n\n  const cursor = () => {\n    let cursorType = 'default'\n    if (selectedTool === SCENE_TOOLS.MOVE) {\n      cursorType = 'grab'\n    } else if (selectedTool === SCENE_TOOLS.STAMP) {\n      cursorType = 'cell'\n    }\n    return cursorType\n  }\n\n  return (\n    <div\n      onDragOver={dragOverHandler}\n      onDrop={dropHandler}\n      onMouseDown={cellClickHandler}\n    >\n      {sprite !== null && (\n        <Sprite\n          key={sprite.id}\n          spriteIndex={sprite.id}\n          rowIndex={rowIndex}\n          colIndex={colIndex}\n          cursor={cursor()}\n          isDraggable={selectedTool === SCENE_TOOLS.MOVE}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default React.memo(Cell)\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getCurrentTool } from '@store/sceneEditor/sceneEditor.slice';\nimport Cell from './Cell.component';\n\nimport styles from './SceneEditor.module.scss';\n\nconst Grid = ({ scene }) => {\n  const selectedTool = useSelector(getCurrentTool);\n\n  return (\n    <div>\n      {scene.spriteSheet.map((row, rowIndex) => (\n        <div className={styles.sceneGridRow} key={rowIndex}>\n          {row.map((cellValue, colIndex) => (\n            <Cell\n              key={colIndex}\n              rowIndex={rowIndex}\n              colIndex={colIndex}\n              sprite={cellValue}\n              selectedTool={selectedTool}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Grid;\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { getCurrentProjectScene } from '@store/currentProject/currentProject.slice'\nimport { getCurrentScene, setCurrentScene, setCurrentSceneIndex } from '@store/sceneEditor/sceneEditor.slice'\nimport Grid from './Grid.component'\n\nimport styles from './SceneEditor.module.scss'\n\nconst SceneEditor = ({ sceneIndex }) => {\n  const dispatch = useDispatch()\n  // TODO this is really confusing. Make it simpler?\n  const projectScene = useSelector(getCurrentProjectScene(sceneIndex))\n  const selectedScene = useSelector(getCurrentScene)\n\n  useEffect(() => {\n    dispatch(setCurrentScene({ scene: projectScene }))\n    dispatch(setCurrentSceneIndex({ sceneIndex }))\n  }, [dispatch, projectScene, sceneIndex])\n\n  return (\n    <div className={styles.sceneGrid + ' bg-gray-100 bg-stripes bg-stripes-white mb-2'}>\n      <Grid scene={selectedScene} />\n    </div>\n  )\n}\n\nexport default SceneEditor\n","import React from 'react'\nimport { useHistory, useParams } from 'react-router'\nimport { useSelector } from 'react-redux'\n\nimport { SCENE_TOOLS } from '@/App.constants'\nimport { getCurrentProjectSpritesPaged } from '@store/currentProject/currentProject.slice'\nimport { getCurrentSpriteIndex } from '@store/spriteEditor/spriteEditor.slice'\nimport { getCurrentTool } from '@store/sceneEditor/sceneEditor.slice'\nimport Sprite from '@views/Project/Sprite/Sprite.component'\n\nimport styles from './SpriteList.module.scss'\n\nconst SpriteList = (props) => {\n  const history = useHistory()\n  const { projectId, sceneIndex } = useParams()\n\n  const sprites = useSelector(getCurrentProjectSpritesPaged(1, 32))\n  const selectedSpriteIndex = useSelector(getCurrentSpriteIndex)\n  const selectedTool = useSelector(getCurrentTool)\n\n  const handleClick = (spriteIndex) => {\n    history.push(`/projects/${projectId}/${sceneIndex}/${spriteIndex}`)\n  }\n\n  return (\n    <div className={styles.spriteList}>\n      <div className={styles.spriteListRow}>\n        {sprites.map((_, spriteIndex) => (\n          <Sprite\n            key={spriteIndex}\n            spriteIndex={spriteIndex}\n            cursor={'pointer'}\n            isSelected={parseInt(spriteIndex) === parseInt(selectedSpriteIndex)}\n            isDraggable={selectedTool === SCENE_TOOLS.MOVE}\n            onClick={() => handleClick(spriteIndex)}\n          />\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default SpriteList\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getCurrentTool } from '@store/spriteEditor/spriteEditor.slice';\nimport { parseString } from 'loader-utils';\n\nconst SpriteInfoBar = ({ spriteIndex }) => {\n  const selectedTool = useSelector(getCurrentTool);\n\n  const formattedIndex = () => {\n    const numericValue = parseInt(spriteIndex) + 1;\n\n    let value = numericValue;\n    if (numericValue < 10) {\n      value = '00' + parseString(numericValue);\n    } else if (numericValue < 100) {\n      value = '0' + parseString(numericValue);\n    }\n\n    return value;\n  }\n\n  return (\n    <div className='flex content-center justify-between p-2 text-xs'>\n      <span>[{formattedIndex()}/256]</span>\n      <span>{selectedTool} tool</span>\n    </div>\n  );\n}\n\nexport default SpriteInfoBar;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { PencilIcon, XIcon, BeakerIcon, EyeIcon } from '@heroicons/react/outline';\n\nimport { SPRITE_TOOLS } from '@/App.constants';\nimport { getCurrentTool, setCurrentTool } from '@store/spriteEditor/spriteEditor.slice';\n\nimport styles from './SpriteEditorToolbar.module.scss';\n\nconst buttonClassesBase = 'relative inline-flex items-center px-4 py-2 text-sm font-medium';\nconst buttonClasses = `${buttonClassesBase} text-gray-800 bg-white hover:bg-gray-50`;\nconst buttonActiveClasses = `${buttonClassesBase} text-gray-50 bg-indigo-500 hover:bg-indigo-500 focus:z-10`;\nconst iconClasses = 'block h-5 w-5';\n\nconst SpriteEditorToolbar = (props) => {\n  const dispatch = useDispatch();\n  const selectedTool = useSelector(getCurrentTool);\n\n  const buttons = [\n    {tool: SPRITE_TOOLS.PENCIL, icon: <PencilIcon className={iconClasses} />},\n    {tool: SPRITE_TOOLS.ERASER, icon: <XIcon className={iconClasses} />},\n    {tool: SPRITE_TOOLS.FILL, icon: <BeakerIcon className={iconClasses} />},\n    {tool: SPRITE_TOOLS.COLOR_SAMPLE, icon: <EyeIcon className={iconClasses} />},\n  ];\n\n  const handleToolClick = tool => dispatch(setCurrentTool({tool}));\n\n  return (\n    <div className={styles.spriteEditorToolbar + ' w-full'}>\n      {buttons.map(button => {\n        return (\n          <button\n            key={button.tool}\n            type=\"button\"\n            className={button.tool === selectedTool ? buttonActiveClasses : buttonClasses}\n            onClick={() => handleToolClick(button.tool)}\n          >\n            {button.icon}\n          </button>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default SpriteEditorToolbar;\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { SwitchHorizontalIcon, SwitchVerticalIcon, ArrowSmUpIcon, ArrowSmRightIcon, ArrowSmDownIcon, ArrowSmLeftIcon, ReplyIcon } from '@heroicons/react/outline'\n\nimport { moveSpriteUp,moveSpriteRight, moveSpriteDown, moveSpriteLeft, flipSpriteVertical, flipSpriteHorizontal, rotateSpriteRight, rotateSpriteLeft } from '@store/spriteEditor/spriteEditor.slice'\nimport { handleSpriteActionButton } from '@store/spriteEditor/spriteEditor.actions'\nimport { useUpdateProjectMutation } from '@store/currentProject/currentProject.api'\n\nimport styles from './SpriteEditorActionbar.module.scss'\n\nconst buttonClassesBase = 'relative inline-flex items-center px-4 py-2 text-sm font-medium'\nconst buttonClasses = `${buttonClassesBase} text-gray-800 bg-white hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500`\nconst iconClasses = 'block h-5 w-5'\n\nconst buttonAttributes = {\n  type: 'button',\n  className: buttonClasses\n}\n\nconst SpriteEditorActionbar = (props) => {\n  const dispatch = useDispatch()\n  const [ updateProject ] = useUpdateProjectMutation()\n\n  const handleClick = (buttonAction) => {\n    dispatch(handleSpriteActionButton(buttonAction))\n      .then(({ projectId, updatedProject }) => {\n        updateProject({ projectId, updatedProject })\n      })\n  }\n\n  return (\n    <div className={styles.spriteEditorActionbar + ' w-full mb-2'}>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSpriteLeft)}>\n        <ArrowSmLeftIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSpriteRight)}>\n        <ArrowSmRightIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSpriteUp)} >\n        <ArrowSmUpIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSpriteDown)}>\n        <ArrowSmDownIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(flipSpriteHorizontal)}>\n        <SwitchHorizontalIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(flipSpriteVertical)}>\n        <SwitchVerticalIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(rotateSpriteLeft)}>\n        <ReplyIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(rotateSpriteRight)}>\n        <ReplyIcon className={iconClasses} style={{transform: 'scaleX(-1)'}} /> \n      </button>\n    </div>\n  )\n}\n\nexport default SpriteEditorActionbar\n","import { getCurrentProject, updateCurrentProjectSprite } from '../currentProject/currentProject.slice'\nimport { getCurrentSpriteIndex, getCurrentSprite, setCurrentSprite } from './spriteEditor.slice'\n\nexport const updateSprite = ({ sprite }) => {\n  return (dispatch, getState) => {\n    const project = getCurrentProject(getState())\n    const spriteIndex = getCurrentSpriteIndex(getState())\n\n    dispatch(setCurrentSprite({ sprite }))\n    const updatedSprite = getCurrentSprite(getState())\n    dispatch(updateCurrentProjectSprite({ index: spriteIndex, sprite: updatedSprite }))\n\n    const updatedProject = {\n      ...project,\n      sprites: [\n        ...project.sprites\n      ],\n    }\n    updatedProject.sprites[spriteIndex] = updatedSprite\n\n    return Promise.resolve({ projectId: project.id, updatedProject })\n  }\n}\n\nexport const handleSpriteActionButton = (buttonAction) => {\n  return (dispatch, getState) => {\n    const project = getCurrentProject(getState())\n    const spriteIndex = getCurrentSpriteIndex(getState())\n\n    dispatch(buttonAction()) // See spriteEditor.slice for reducer cases\n    const updatedSprite = getCurrentSprite(getState())\n    dispatch(updateCurrentProjectSprite({ index: spriteIndex, sprite: updatedSprite }))\n\n    const updatedProject = {\n      ...project,\n      sprites: [\n        ...project.sprites\n      ],\n    }\n    updatedProject.sprites[spriteIndex] = updatedSprite\n\n    return Promise.resolve({ projectId: project.id, updatedProject })\n  }\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { SPRITE_TOOLS } from '@/App.constants';\nimport { setCurrentColor } from '@store/spriteEditor/spriteEditor.slice';\n\nconst Cell = (props) => {\n  const {\n    rowIndex,\n    colIndex,\n    colorKey,\n    selectedTool,\n    mouseIsDown,\n    clickHandler,\n  } = props;\n\n  const dispatch = useDispatch();\n\n  const cellClickHandler = () => {\n    if (selectedTool === SPRITE_TOOLS.COLOR_SAMPLE) {\n      dispatch(setCurrentColor({color: colorKey}));\n      return;\n    }\n    clickHandler(rowIndex, colIndex);\n  }\n\n  const mouseEnterHandler = () => {\n    if (selectedTool === SPRITE_TOOLS.COLOR_SAMPLE && mouseIsDown) {\n      dispatch(setCurrentColor({color: colorKey}));\n      return;\n    }\n    if (mouseIsDown) {\n      clickHandler(rowIndex, colIndex);\n    }\n  }\n\n  return (\n    <button\n      className={`color color--${colorKey}`}\n      onMouseDown={() => cellClickHandler()}\n      onMouseEnter={() => mouseEnterHandler()}\n    />\n  );\n}\n\nexport default React.memo(Cell);\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { SPRITE_TOOLS } from '@/App.constants'\nimport { updateSprite } from '@store/spriteEditor/spriteEditor.actions'\nimport { useUpdateProjectMutation } from '@store/currentProject/currentProject.api'\nimport { getCurrentProjectSpriteByIndex, updateCurrentProjectSprite } from '@store/currentProject/currentProject.slice'\nimport { getCurrentSprite, setCurrentSprite, setCurrentSpriteIndex, getCurrentTool, getCurrentColor } from '@store/spriteEditor/spriteEditor.slice'\nimport Cell from './Cell.component'\n\nimport styles from './SpriteEditor.module.scss'\n\nconst SpriteEditor = ({ spriteIndex }) => {\n  const dispatch = useDispatch()\n\n  const projectSprite = useSelector(getCurrentProjectSpriteByIndex(spriteIndex))\n  const selectedSprite = useSelector(getCurrentSprite)\n  const selectedTool = useSelector(getCurrentTool)\n  const selectedColor = useSelector(getCurrentColor)\n\n  const [mouseDown, setMouseDown] = useState(false)\n  const [labeledGrid, updateLabeledGrid] = useState([])\n\n  const [\n    updateProject, // This is the mutation trigger\n    // { isLoading: isUpdating }, // This is the destructured mutation result\n  ] = useUpdateProjectMutation()\n\n  const updateCellValues = (rowIndex, colIndex) => {\n    const updatedGrid = selectedSprite.map(row => ([ ...row.map(cell => cell) ]))\n\n    if (selectedTool === SPRITE_TOOLS.PENCIL) {\n      updatedGrid[rowIndex][colIndex] = selectedColor\n    } else if (selectedTool === SPRITE_TOOLS.FILL) {\n      const cellLabelValue = labeledGrid[rowIndex][colIndex]\n      labeledGrid.forEach((row, labeledRowIndex) => {\n        row.forEach((colValue, labeledColIndex) => {                   \n          if (colValue === cellLabelValue) {\n            updatedGrid[labeledRowIndex][labeledColIndex] = selectedColor\n          }\n        })\n      })\n    } else if (selectedTool === SPRITE_TOOLS.ERASER) {\n      updatedGrid[rowIndex][colIndex] = null\n    } else {\n      return\n    }\n\n    dispatch(updateSprite({ sprite: updatedGrid }))\n      .then(({ projectId, updatedProject }) => {\n        updateProject({ projectId, updatedProject })\n      })\n  }\n\n  // todo move to helper file?\n  const scanForGridRegions = useCallback(() => {\n    const labeledGrid = []\n    const groups = []\n\n    // Label cells in preliminary groups\n    selectedSprite.forEach((row, rowIndex) => {\n      labeledGrid[rowIndex] = []\n\n      row.forEach((colValue, colIndex) => {\n        const westValue = colIndex > 0 ? selectedSprite[rowIndex][colIndex - 1] : -1\n        const northValue = rowIndex > 0 ? selectedSprite[rowIndex - 1][colIndex] : -1\n        const westLabel = colIndex > 0 ? labeledGrid[rowIndex][colIndex - 1] : -1\n        const northLabel = rowIndex > 0 ? labeledGrid[rowIndex - 1][colIndex] : -1\n\n        if (colValue === westValue) {\n          if (colValue === northValue && westLabel !== northLabel) {\n            const min = Math.min(westLabel, northLabel)\n            const max = Math.max(westLabel, northLabel)\n            const lowestMatchedIndex = groups.findIndex(subSet => subSet.has(min))\n            groups[lowestMatchedIndex].add(max)\n            groups[max] = groups[lowestMatchedIndex]\n            labeledGrid[rowIndex][colIndex] = min\n          } else {\n            labeledGrid[rowIndex][colIndex] = westLabel\n          }\n        }\n\n        if (colValue !== westValue) {\n          if (colValue === northValue) {\n            labeledGrid[rowIndex][colIndex] = northLabel\n          } else {\n            const newGroup = new Set()\n            newGroup.add(groups.length)\n            groups.push(newGroup)\n            labeledGrid[rowIndex][colIndex] = groups.length - 1\n          }\n        }\n      })\n    })\n\n    // Group equivalents\n    const processedLabeledGrid = labeledGrid.map(row => {\n      return row.map(colValue => {\n        const setArray = []\n        groups[colValue].forEach(value => {\n          setArray.push(value)\n        })\n        const minValue = Math.min(...setArray)\n        return minValue\n      })\n    })\n\n    updateLabeledGrid(processedLabeledGrid)\n  }, [selectedSprite])\n\n  useEffect(() => {\n    dispatch(setCurrentSprite({ sprite: projectSprite }))\n    dispatch(setCurrentSpriteIndex({ spriteIndex }))\n  }, [dispatch, projectSprite, spriteIndex])\n\n  useEffect(() => {\n    scanForGridRegions()\n  }, [scanForGridRegions, selectedSprite])\n\n  const Cells = selectedSprite\n    .map((row, rowIndex) => {\n      return (\n        <div className={styles.spriteGridRow} key={rowIndex}>\n          {row.map((cellValue, colIndex) => {\n            return (\n              <Cell\n                key={`r${rowIndex}-c${colIndex}`}\n                rowIndex={rowIndex}\n                colIndex={colIndex}\n                colorKey={cellValue}\n                selectedColorKey={selectedColor}\n                selectedTool={selectedTool}\n                mouseIsDown={mouseDown}\n                clickHandler={updateCellValues} \n              />\n            )\n          })}\n        </div>\n      )\n    })\n\n  const handleMouseLeave = () => {\n    if (mouseDown) {\n      dispatch(updateCurrentProjectSprite({index: spriteIndex, sprite: selectedSprite}))\n    }\n    setMouseDown(false)\n  }\n\n  return (\n    <div className={'mb-2'}>\n      <div\n        className={styles.spriteGrid}\n        onMouseLeave={handleMouseLeave}\n        onMouseDown={() => setMouseDown(true)}\n        onMouseUp={() => {\n          setMouseDown(false)\n          dispatch(updateCurrentProjectSprite({index: spriteIndex, sprite: selectedSprite}))\n        }}\n      >\n        {Cells}\n      </div>\n    </div>\n  )\n}\n\nexport default React.memo(SpriteEditor)\n","import React from 'react';\n\nimport styles from './Cell.module.scss';\n\nconst Cell = (props) => {\n  const {\n    value,\n    isSelected = false,\n    onClick\n  } = props;\n\n  return (\n    <button\n      className={`color color--${value} ${styles.cell}` + (isSelected ? ' ' + styles.cellSelected : '')}\n      onClick={() => onClick(value)}\n    />\n  );\n}\n\nexport default Cell;\n","import React, { useEffect, useRef, useState } from 'react';\nimport chroma from 'chroma-js';\n\nimport { ColorSwatchIcon } from '@heroicons/react/outline';\n\nconst InfoBar = ({ selectedColor, selectedPalette }) => {\n  const cellRef = useRef(null);\n  const [colorHex, setColorHex] = useState('');\n  const [colorRgb, setColorRgb] = useState('');\n  const [isDarkColor, setIsDarkColor] = useState(false);\n\n  useEffect(() => {\n    const style = window.getComputedStyle(cellRef.current);\n    const rgbColor = style.backgroundColor;\n    const hex = chroma(rgbColor).hex();\n    const rgb = chroma(rgbColor).css();\n    const lum = chroma(rgbColor).luminance();\n\n    setColorHex(hex);\n    setColorRgb(rgb);\n    setIsDarkColor(lum < .45);\n  }, [selectedColor, selectedPalette]);\n\n  const textColorClass = isDarkColor ? 'text-white' : 'text-black';\n\n  return (\n    <div\n      className={`flex flex-1 items-start h-1/4 p-2 text-xs font-mono color color--${selectedColor} ${textColorClass}`}\n      ref={cellRef}\n    >\n      <ColorSwatchIcon className='block h-5 w-5 mr-2' /> c{selectedColor} | {colorHex} | {colorRgb}\n    </div>\n  );\n}\n\nexport default InfoBar;\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { COLOR_KEYS } from '@/App.constants'\nimport { getCurrentColor, setCurrentColor } from '@store/spriteEditor/spriteEditor.slice'\nimport { getCurrentProjectPalette } from '@store/currentProject/currentProject.slice'\nimport Cell from './Cell.component'\nimport InfoBar from './InfoBar.component'\n\nimport styles from './ColorSelector.module.scss'\n\nconst SpriteEditor = (props) => {\n  const dispatch = useDispatch()\n  const selectedColor = useSelector(getCurrentColor)\n  const selectedPalette = useSelector(getCurrentProjectPalette)\n\n  const handleColorClick = (colorKey) => {\n    dispatch(setCurrentColor({ color: colorKey }))\n  }\n\n  return (\n    <div className={'flex-1 flex flex-col'}>\n      <div className='bg-white'>\n        <div className={styles.grid}>\n          {COLOR_KEYS.map((key, index) => {\n            return (\n              <Cell\n                key={index}\n                value={key}\n                isSelected={key === selectedColor}\n                onClick={handleColorClick}\n              />\n            )\n          })}\n        </div>\n      </div>\n      <InfoBar selectedColor={selectedColor} selectedPalette={selectedPalette} />\n    </div>\n  )\n}\n\nexport default SpriteEditor\n","import React, { Fragment, useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport { useDispatch, useSelector } from 'react-redux'\n// import ReactJson from 'react-json-view'\n\nimport { useReadProjectByIdQuery } from '@store/currentProject/currentProject.api'\nimport { getCurrentProjectName, getCurrentProjectUpdatedReadable, getCurrentProjectPaletteClass, setCurrentProject } from '@store/currentProject/currentProject.slice'\n\nimport PaletteSelector from '@views/Project/PaletteSelector/PaletteSelector.component'\n// import ScenesList from '@views/Project/ScenesList/ScenesList.component'\nimport SceneInfoBar from '@views/Project/SceneInfoBar/SceneInfoBar.component'\nimport SceneEditorToolbar from '@views/Project/SceneEditorToolbar/SpriteEditorToolbar.component'\nimport SceneEditorActionbar from '@views/Project/SceneEditorActionbar/SceneEditorActionbar.component'\nimport SceneEditor from '@views/Project/SceneEditor/SceneEditor.component'\nimport SpriteList from '@views/Project/SpriteList/SpriteList.component'\nimport SpriteInfoBar from '@views/Project/SpriteInfoBar/SpriteInfoBar.component'\nimport SpriteEditorToolbar from '@views/Project/SpriteEditorToolbar/SpriteEditorToolbar.component'\nimport SpriteEditorActionbar from '@views/Project/SpriteEditorActionbar/SpriteEditorActionbar.component'\nimport SpriteEditor from '@views/Project/SpriteEditor/SpriteEditor.component'\nimport ColorSelector from '@views/Project/ColorSelector/ColorSelector.component'\n\nimport { Menu, Transition } from '@headlessui/react'\nimport { CogIcon } from '@heroicons/react/solid'\n\nconst Project = (props) => {\n  const { projectId, sceneIndex = 0, spriteIndex = 0 } = useParams()\n  const { data } = useReadProjectByIdQuery(projectId)\n\n  const dispatch = useDispatch()\n  const projectName = useSelector(getCurrentProjectName)\n  const projectUpdatedReadable = useSelector(getCurrentProjectUpdatedReadable)\n  const projectPaletteClass = useSelector(getCurrentProjectPaletteClass)\n\n  useEffect(() => {\n    dispatch(setCurrentProject({ project: data }))\n  }, [dispatch, data])\n\n  // const { data, error, isLoading } = useGetAllPokemonQuery(undefined, {\n  //   selectFromResult: ({ data, error, isLoading }) => ({\n  //     data: data?.filter((item: Pokemon) => item.name.endsWith(\"saur\")),\n  //     error,\n  //     isLoading\n  //   }),\n  //   pollingInterval: 3000,\n  // });\n\n  return (\n    <div>\n      <div className='relative mt-2 grid grid-cols-1 gap-0 mb-5'>\n        <div className='bg-white shadow flex justify-between items-center'>\n          <div className='bg-gray-50 px-5 py-3'>\n            NAME: {projectName} / ID: {projectId} / Updated: {projectUpdatedReadable}\n          </div>\n\n          <Menu as='div' className='inline-block lg:hidden  text-left h-full'>\n            <Menu.Button className='h-full inline-flex justify-center items-center w-32 px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-indigo-500'>\n              Settings\n              <CogIcon className='-mr-1 ml-2 h-5 w-5' aria-hidden='true' />\n            </Menu.Button>\n\n            <Transition\n              as={Fragment}\n              enter='transition ease-out duration-100'\n              enterFrom='transform opacity-0 scale-95'\n              enterTo='transform opacity-100 scale-100'\n              leave='transition ease-in duration-75'\n              leaveFrom='transform opacity-100 scale-100'\n              leaveTo='transform opacity-0 scale-95'\n            >\n              <Menu.Items className='origin-top-right absolute right-0 mt-2 w-full shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10'>\n                <div className='py-1'>\n                  <div className='bg-white mb-5'>\n                    <PaletteSelector />\n                  </div>\n                </div>\n              </Menu.Items>\n            </Transition>\n          </Menu>\n        </div>\n      </div>\n\n      <div className='grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3'>\n        <div className='bg-white hidden lg:block'>\n          <PaletteSelector />\n          {/* <ScenesList /> */}\n        </div>\n        <div className={`flex flex-col bg-white ${projectPaletteClass}`}>\n          <div className='shadow'>\n            <SceneInfoBar sceneIndex={sceneIndex} />\n            <div className='bg-indigo-100 bg-stripes bg-stripes-white shadow-sm border-t border-gray-100'>\n              <SceneEditorToolbar />\n              <SceneEditorActionbar />\n            </div>\n          </div>\n          <SceneEditor sceneIndex={sceneIndex} />\n          <SpriteList />\n        </div>\n        <div className={`flex flex-col bg-white ${projectPaletteClass}`}>\n          <div className='shadow'>\n            <SpriteInfoBar spriteIndex={spriteIndex} />\n            <div className='bg-indigo-100 bg-stripes bg-stripes-white shadow-sm border-t border-gray-100'>\n              <SpriteEditorToolbar />\n              <SpriteEditorActionbar />\n            </div>\n          </div>\n          <SpriteEditor spriteIndex={spriteIndex} />\n          <ColorSelector />\n        </div>\n      </div>\n\n      {/* <div className='mt-2 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3'>\n        <ReactJson src={JSON.parse(JSON.stringify(project))} />\n      </div> */}\n    </div>\n  )\n}\n\nexport default Project\n","import React from 'react';\n\nconst Settings = (props) => {\n\n  return (\n    <div className='class'>Settings...</div>\n  );\n}\n\nexport default Settings;\n","import React from 'react'\nimport { Switch, Route } from \"react-router-dom\"\n\n// import { useGetAllProjectsQuery } from '@store/projects/allProjects.api'\n\nimport SiteMenu from '@components/layout/NavBar.component'\nimport Dashboard from '@views/Dashboard/Dashboard.component'\nimport Projects from '@views/Projects/Projects.component'\nimport Project from '@views/Project/Project.component'\nimport Settings from '@views/Settings/Settings.component'\n\nimport './App.css'\nimport './styles/styles.scss'\n\nconst routes = [\n  { path: '/projects/:projectId/:sceneIndex/:spriteIndex', component: Project },\n  { path: '/projects', component: Projects },\n  { path: '/settings', component: Settings },\n  { path: '/', component: Dashboard },\n]\n\nfunction App() {\n  // const { data, error, isLoading } = useGetAllProjectsQuery()\n  // console.log('data, error, isLoading', data, error, isLoading)\n\n  // const { data, error, isLoading } = useGetAllProjectsQuery(undefined, {\n  //   selectFromResult: ({ data, error, isLoading }) => ({\n  //     data: data,\n  //     error,\n  //     isLoading\n  //   }),\n  //   pollingInterval: 3000,\n  // })\n\n  return (\n    <div className=\"App bg-gradient-to-r from-gray-200 via-gray-100 to-gray-300\">\n      <div className=\"min-h-screen\">\n        <SiteMenu />\n        <div className=\"py-10\">\n          <main>\n            <div className=\"max-w-7xl mx-auto sm:px-6 lg:px-8\">\n              <div className=\"px-4 sm:px-0\">\n                <Switch>\n                  {routes.map(route => (\n                    <Route\n                      key={route.path}\n                      path={route.path}\n                      component={route.component}\n                    />\n                  ))}\n                </Switch>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// TODO I don't think we are using this slice anymore...\n\nimport { createSlice } from '@reduxjs/toolkit'\n\nimport Scene from '../../data/Scene'\n\nconst initialState = []\n\nexport const projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    setProjects(_, action) {\n      const { projects } = action.payload\n      return [ ...projects ]\n    },\n    // TODO why did I make this?\n    updateProject(state, action) {\n      const { project } = action.payload\n      const projectIndex = state.findIndex(p => p.id === project.id)\n      if (projectIndex > -1) {\n        state[projectIndex] = project\n      } \n    },\n    setProjectPalette(state, action) {\n      const { projectId, value } = action.payload\n      const projectIndex = state.findIndex(p => p.id === projectId)\n      if (projectIndex > -1) {\n        state[projectIndex].palette = value\n      } \n    },\n    insertProjectScene(state, action) {\n      const { projectId } = action.payload\n      const projectIndex = state.findIndex(p => p.id === projectId)\n      if (projectIndex > -1) {\n        state[projectIndex].scenes.push({ ...new Scene('Empty Init Scene') })\n      } \n    },\n    updateProjectScene(state, action) {\n      const { projectId, sceneIndex, scene } = action.payload\n      const projectIndex = state.findIndex(p => p.id === projectId)\n      if (projectIndex > -1) {\n        state[projectIndex].scenes[sceneIndex] = scene\n      } \n    },\n    // TODO: Delete Project Scene\n    // TODO: this one too\n    updateProjectSprite(state, action) {\n      // const { projectId, spriteIndex, sprite } = action.payload\n      // const projectIndex = state.findIndex(p => p.id === projectId)\n      // if (projectIndex > -1) {\n      //   state[projectIndex].scenes[sceneIndex] = scene\n      // }\n    },\n    createNewProject(state, action) {\n      const { project } = action.payload\n      state.push(project)\n    },\n    deleteProject(state, action) {\n      const { projectId } = action.payload\n      const projectIndex = state.findIndex((project) => project.id === projectId)\n      state.splice(projectIndex, 1)\n    },\n    // TODO\n    cloneProject(state, action) {\n      // const { project } = action.payload\n      // state = state.push(project)\n    }\n  },\n})\n\n// Actions\nexport const {\n  setProjects,\n  updateProject,\n  updateProjectSprite,\n  updateProjectScene,\n  insertProjectScene,\n  setProjectPalette,\n  createNewProject,\n  deleteProject,\n  cloneProject,\n} = projectsSlice.actions\n\n// Selectors\nexport const getProjects = (state) => state.projects\nexport const getProjectById = (projectId) => (state) => state.projects.find(project => project.id === projectId)\nexport const getProjectByIndex = (projectIndex) => (state) => state.projects.find((_, index) => index === projectIndex)\nexport const getProjectPalette = (projectId) => (state) => {\n  const project = state.projects.find(project => project.id === projectId)\n  return project.palette || 'default'\n}\nexport const getProjectPaletteClass = (projectId) => (state) => {\n  const project = state.projects.find(project => project.id === projectId)\n  const palette = project.palette || 'default'\n  return `palette palette--${!palette ? 'default' : palette}`\n}\nexport const getProjectScenesCount = (projectId) => (state) => {\n  const project = state.projects.find(project => project.id === projectId)\n  return project.scenes.length\n} \nexport const getProjectScenes = (projectId) => (state) => {\n  const project = state.projects.find(project => project.id === projectId)\n  return project.scenes\n}\nexport const getProjectScene = (projectId, sceneIndex) => (state) => {\n  const project = state.projects.find(project => project.id === projectId)\n  return project.scenes[sceneIndex]\n}\nexport const getProjectSprites = (projectId) => (state) => {\n  const project = state.projects.find(project => project.id === projectId)\n  return project.sprites\n}\nexport const getProjectSprite = (projectId, spriteIndex) => (state) => {\n  const project = state.projects.find(project => project.id === projectId)\n  return project.sprites[spriteIndex]\n}\n\nexport default projectsSlice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport { setupListeners } from '@reduxjs/toolkit/query'\nimport logger from 'redux-logger'\n\nimport { allProjectsApi } from './projects/allProjects.api'\nimport { currentProjectApi } from './currentProject/currentProject.api'\n\nimport projectsSlice from '@store/projects/projects.slice'\nimport currentProjectSlice from '@store/currentProject/currentProject.slice'\nimport sceneEditorSlice from '@store/sceneEditor/sceneEditor.slice'\nimport spriteEditorSlice from '@store/spriteEditor/spriteEditor.slice'\n\nexport const store = configureStore({\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware()\n    .concat(logger)\n    .concat(allProjectsApi.middleware)\n    .concat(currentProjectApi.middleware),\n  reducer: {\n    [allProjectsApi.reducerPath]: allProjectsApi.reducer,\n    [currentProjectApi.reducerPath]: currentProjectApi.reducer,\n    projects: projectsSlice,\n    currentProject: currentProjectSlice,\n    sceneEditor: sceneEditorSlice,\n    spriteEditor: spriteEditorSlice,\n  },\n})\n\nsetupListeners(store.dispatch)\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sceneGrid\":\"SceneEditor_sceneGrid__2enL9\",\"sceneGridRow\":\"SceneEditor_sceneGridRow__oE_Hy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sprite\":\"Sprite_sprite__2NRZ1\",\"spriteSelected\":\"Sprite_spriteSelected__1703B\",\"spriteRow\":\"Sprite_spriteRow__3VFP1\"};"],"sourceRoot":""}