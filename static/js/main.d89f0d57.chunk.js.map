{"version":3,"sources":["components/Sprite/Sprite.module.scss","components/Scene/Scene.module.scss","views/Project/SceneEditorToolbar/SceneEditorToolbar.module.scss","views/Project/SceneEditorActionbar/SceneEditorActionbar.module.scss","views/Project/SpriteEditorToolbar/SpriteEditorToolbar.module.scss","views/Project/SpriteEditorActionbar/SpriteEditorActionbar.module.scss","views/Project/ColorSelector/ColorSelector.module.scss","App.constants.js","store/projects/projects.slice.js","components/layout/NavBar.component.jsx","views/Dashboard/Dashboard.component.jsx","data/Scene.js","data/Project.js","components/Sprite/Sprite.component.jsx","components/Scene/Scene.component.jsx","views/Projects/Project.component.jsx","components/Modal/Modal.component.jsx","views/Projects/Projects.component.jsx","store/currentProject/currentProject.slice.js","store/spriteEditor/spriteEditor.slice.js","store/sceneEditor/sceneEditor.slice.js","store/actions.js","views/Project/PaletteSelector/PaletteSelector.component.jsx","views/Project/ScenesList/NewSceneButton.component.jsx","views/Project/ScenesList/ScenesList.component.jsx","views/Project/SceneInfoBar/SceneInfoBar.component.jsx","views/Project/SceneEditorToolbar/SpriteEditorToolbar.component.jsx","views/Project/SceneEditorActionbar/SceneEditorActionbar.component.jsx","views/Project/Sprite/Sprite.component.jsx","views/Project/SceneEditor/Cell.component.jsx","views/Project/SceneEditor/Grid.component.jsx","views/Project/SceneEditor/SceneEditor.component.jsx","views/Project/SpriteList/SpriteList.component.jsx","views/Project/SpriteInfoBar/SpriteInfoBar.component.jsx","views/Project/SpriteEditorToolbar/SpriteEditorToolbar.component.jsx","views/Project/SpriteEditorActionbar/SpriteEditorActionbar.component.jsx","views/Project/SpriteEditor/Cell.component.jsx","views/Project/SpriteEditor/SpriteEditor.component.jsx","views/Project/ColorSelector/Cell.component.jsx","views/Project/ColorSelector/InfoBar.component.jsx","views/Project/ColorSelector/ColorSelector.component.jsx","views/Project/Project.component.jsx","views/Settings/Settings.component.jsx","App.js","store/store.js","serviceWorker.js","index.js","views/Project/SceneEditor/SceneEditor.module.scss","views/Project/Sprite/Sprite.module.scss","views/Project/SpriteList/SpriteList.module.scss","views/Project/SpriteEditor/SpriteEditor.module.scss","views/Project/ColorSelector/Cell.module.scss"],"names":["module","exports","PALETTE_LIST","Date","COLOR_KEYS","SCENE_TOOLS","SPRITE_TOOLS","EMPTY_SCENE","name","height","width","spriteSheet","EMPTY_SPRITE","SPRITE_LIST","Array","fill","map","EMPTY_PROJECT","id","author","createdDate","updatedDate","palette","scenes","sprites","projectsSlice","createSlice","initialState","reducers","setProjects","_","action","console","log","projects","payload","updateProject","state","project","projectIndex","findIndex","p","updateProjectScene","projectId","sceneIndex","scene","insertProjectScene","push","setProjectPalette","value","createNewProject","actions","getProjects","navigation","href","navLinkClasses","activeClassName","className","navLinkClassesMobile","SiteMenu","props","as","open","exact","to","item","Button","aria-hidden","Panel","Dashboard","Scene","this","Project","initializeData","initializeScenes","initializeSprites","created","now","updated","Sprite","sprite","row","rowIndex","styles","cell","cellIndex","React","memo","paletteClass","useSelector","find","getProjectScene","getProjectSprites","Modal","children","isOpen","setIsOpen","confirmHandler","cancelButtonRef","useRef","Root","show","Fragment","initialFocus","onClose","Child","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Overlay","Title","type","onClick","ref","Projects","dispatch","useDispatch","useState","newProjectName","setNewProjectName","newProject","NewProject","htmlFor","placeholder","onChange","e","target","currentProjectSlice","setSelectedProject","setSelectedProjectName","dateUpdated","setSelectedProjectPalette","updateSelectedProjectSprite","index","updateSelectedProjectScene","getSelectedProjectId","currentProject","getSelectedProjectName","getSelectedProjectPalette","getSelectedProjectPaletteClass","getSelectedProjectSprites","getSelectedProjectSpriteByIndex","getSelectedProjectScenes","selectedTool","selectedColor","selectedSprite","selectedSpriteIndex","spriteEditorSlice","setSelectedTool","tool","setSelectedColor","color","setSelectedSprite","setSelectedSpriteIndex","spriteIndex","flipSpriteHorizontal","forEach","reverse","flipSpriteVertical","moveSpriteUp","firstRow","shift","moveSpriteRight","lastCell","pop","unshift","moveSpriteDown","lastRow","moveSpriteLeft","firstCell","rotateSpriteRight","tempSprite","length","rotateSpriteLeft","getSelectedTool","spriteEditor","getSelectedColor","getSelectedSprite","getSelectedSpriteIndex","selectedScene","selectedSceneIndex","sceneEditorSlice","setSelectedScene","setSelectedSceneIndex","updateSelectedSceneCell","column","flipSceneHorizontal","flipSceneVertical","moveSceneLeft","moveSceneUp","moveSceneRight","moveSceneDown","clearSceneSprites","sceneEditor","getSelectedScene","getSelectedSceneName","getSelectedSceneIndex","updateScene","getState","PaletteSelector","selectedPallete","handlePaletteClick","updatePalette","NewSceneButton","ScenesList","SceneInfoBar","sceneName","buttonClassesBase","buttonClasses","buttonActiveClasses","iconClasses","SceneEditorToolbar","buttons","icon","sceneEditorToolbar","button","buttonAttributes","SceneEditorActionbar","handleClick","buttonAction","handleSceneActionButton","sceneEditorActionbar","isSelected","isDraggable","onDoubleClick","cursor","colIndex","spriteHtml","spriteRow","spriteSelected","style","draggable","onDragStart","event","draggingData","spritePoolIndex","dataTransfer","setData","JSON","stringify","onDragOver","preventDefault","onDrop","Cell","passedData","parse","getData","hasValidRow","hasValidColumn","clearData","onMouseDown","cursorType","Grid","sceneGridRow","cellValue","SceneEditor","projectScene","useEffect","sceneGrid","SpriteList","history","useHistory","useParams","page","amount","filter","getSelectedProjectSpritesPaged","spriteList","spriteListRow","parseInt","SpriteInfoBar","numericValue","parseString","formattedIndex","SpriteEditorToolbar","spriteEditorToolbar","SpriteEditorActionbar","handleSpriteActionButton","spriteEditorActionbar","transform","colorKey","mouseIsDown","clickHandler","onMouseEnter","SpriteEditor","projectSprite","mouseDown","setMouseDown","labeledGrid","updateLabeledGrid","updateCellValues","updatedGrid","cellLabelValue","labeledRowIndex","colValue","labeledColIndex","scanForGridRegions","useCallback","groups","westValue","northValue","westLabel","northLabel","min","Math","max","lowestMatchedIndex","subSet","has","add","newGroup","Set","processedLabeledGrid","setArray","Cells","spriteGridRow","selectedColorKey","spriteGrid","onMouseLeave","onMouseUp","cellSelected","InfoBar","cellRef","colorHex","setColorHex","colorRgb","setColorRgb","isDarkColor","setIsDarkColor","rgbColor","window","getComputedStyle","current","backgroundColor","hex","chroma","rgb","css","lum","luminance","textColorClass","handleColorClick","colorGrid","key","getProjectById","projectName","Items","Settings","routes","path","component","App","mockProjects","route","store","configureStore","middleware","getDefaultMiddleware","concat","logger","reducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d89f0d57.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Sprite_row__mrC6T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Scene_row__1vFnU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sceneEditorToolbar\":\"SceneEditorToolbar_sceneEditorToolbar__1LfIE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sceneEditorActionbar\":\"SceneEditorActionbar_sceneEditorActionbar__2bPer\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spriteEditorToolbar\":\"SpriteEditorToolbar_spriteEditorToolbar__1Xxxk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spriteEditorActionbar\":\"SpriteEditorActionbar_spriteEditorActionbar__1kl72\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorGrid\":\"ColorSelector_colorGrid__1W32q\"};","export const EMPTY_USER = {\n  name: '',\n  email: '',\n  createdDate: new Date(),\n  updatedDate: new Date(),\n  settings: {\n    theme: 'default',\n  },\n}\n\nexport const PALETTE_LIST = [\n  'default',\n  'ff-nes',\n  'sky-high',\n  'brinstar',\n  'brinstar-2',\n]\n\nexport const COLOR_KEYS = [\n  '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15',\n]\n\nexport const SCENE_TOOLS = {\n  MOVE: 'move',\n  STAMP: 'stamp',\n}\n\nexport const SCENE_ACTIONS = {\n  MOVE_LEFT: 'move-left',\n  MOVE_UP: 'move-up',\n  MOVE_RIGHT: 'move-right',\n  MOVE_DOWN: 'move-down',\n  CLEAR_SCENE: 'clear-scene',\n}\n\nexport const SPRITE_TOOLS = {\n  PENCIL: 'pencil',\n  ERASER: 'eraser',\n  FILL: 'fill',\n  COLOR_SAMPLE: 'color-sample',\n}\n\nexport const SPRITE_ACTIONS = {\n  MOVE_COLORS_1: 'move-colors-1',\n  MOVE_COLORS_2: 'move-colors-2',\n  FLIP_HORIZONTAL: 'flip-horizontal',\n  FLIP_VERTICAL: 'flip-vertical',\n  MOVE_LEFT: 'move-left',\n  MOVE_UP: 'move-up',\n  MOVE_RIGHT: 'move-right',\n  MOVE_DOWN: 'move-down',\n}\n\nexport const EMPTY_SCENE = {\n  name: 'new scene',\n  height: 8,\n  width: 8,\n  spriteSheet: [\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n    [null, null, null, null, null, null, null, null],\n  ],\n}\n\nexport const EMPTY_SPRITE = [\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n  [null, null, null, null, null, null, null, null],\n]\n\nexport const SPRITE_LIST = new Array(128)\n  .fill(null)\n  .map(() => [\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n    [\"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\", \"00\"],\n  ])\n\nexport const EMPTY_PROJECT = {\n  id: 'init',\n  name: 'init',\n  author: 'init',\n  createdDate: 'date1',//new Date(),\n  updatedDate: 'date2',//new Date(),\n  palette: 'default',\n  scenes: [\n    { ...EMPTY_SCENE },\n  ],\n  sprites: SPRITE_LIST,\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nimport { EMPTY_SCENE } from '@/App.constants.js'\n\nconst initialState = []\n\nexport const projectsSlice = createSlice({\n  name: 'projects',\n  initialState,\n  reducers: {\n    setProjects(_, action) {\n      console.log('calling setProjects', action)\n      const { projects } = action.payload\n      return [ ...projects ]\n    },\n    // TODO why did I make this?\n    updateProject(state, action) {\n      const { project } = action.payload\n      const projectIndex = state.findIndex(p => p.id === project.id)\n      if (projectIndex > -1) {\n        state[projectIndex] = project\n      } \n    },\n    updateProjectScene(state, action) {\n      const { projectId, sceneIndex, scene } = action.payload\n      const projectIndex = state.findIndex(p => p.id === projectId)\n      if (projectIndex > -1) {\n        state[projectIndex].scenes[sceneIndex] = scene\n      } \n    },\n    insertProjectScene(state, action) {\n      const { projectId } = action.payload\n      const projectIndex = state.findIndex(p => p.id === projectId)\n      if (projectIndex > -1) {\n        state[projectIndex].scenes.push({\n          ...EMPTY_SCENE,\n          id: 'blah'\n        })\n      } \n      console.log('state[projectIndex].scenes', EMPTY_SCENE)\n    },\n    setProjectPalette(state, action) {\n      const { projectId, value } = action.payload\n      const projectIndex = state.findIndex(p => p.id === projectId)\n      if (projectIndex > -1) {\n        state[projectIndex].palette = value\n      } \n    },\n    createNewProject(state, action) {\n      const { project } = action.payload\n      state.push(project)\n    }\n    // TODO deleteProject\n    // TODO cloneProject\n  },\n})\n\n// Actions\nexport const {\n  setProjects,\n  updateProject,\n  updateProjectScene,\n  insertProjectScene,\n  setProjectPalette,\n  createNewProject,\n} = projectsSlice.actions\n\n// Selectors\nexport const getProjects = (state) => state.projects\nexport const getProject = (projectId) => (state) => state.projects.find(project => project.id === projectId)\nexport const getProjectById = (projectId) => (state) => state.projects.find(project => project.id === projectId)\nexport const getProjectByIndex = (projectIndex) => (state) => state.projects.find((_, index) => index === projectIndex)\nexport const getProjectPalette = (projectId) => (state) => {\n  const project = state.projects.find(project => project.id === projectId)\n  return project.palette || 'default'\n}\nexport const getProjectPaletteClass = (projectId) => (state) => {\n  const project = state.projects.find(project => project.id === projectId)\n  const palette = project.palette || 'default'\n  return `palette palette--${!palette ? 'default' : palette}`\n}\nexport const getProjectScene = (projectId, sceneIndex) => (state) => {\n  const project = state.projects.find(project => project.id === projectId)\n  return project.scenes[sceneIndex]\n}\nexport const getProjectSprites = (projectId) => (state) => {\n  console.log('project.id === projectId', projectId, state.projects[0].id)\n  const project = state.projects.find(project => project.id === projectId)\n  return project.sprites\n}\nexport const getProjectSprite = (projectId, spriteIndex) => (state) => {\n  const project = state.projects.find(project => project.id === projectId)\n  return project.sprites[spriteIndex]\n}\n\nexport default projectsSlice.reducer\n","import React from 'react'\nimport { NavLink } from \"react-router-dom\"\n\nimport { Disclosure } from '@headlessui/react'\nimport { AdjustmentsIcon, ViewGridIcon, MenuIcon, XIcon } from '@heroicons/react/outline'\n\nconst navigation = [\n  { name: 'Dashboard', href: ''},\n  { name: 'Projects', href: '/projects'},\n]\n\nconst navLinkClasses = {\n  activeClassName: 'border-indigo-500 text-gray-900',\n  className: 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300 inline-flex items-center px-1 pt-1 border-b-2 text-sm font-medium'\n}\n\nconst navLinkClassesMobile = {\n  activeClassName: 'bg-indigo-50 border-indigo-500 text-indigo-700',\n  className: 'border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800 block pl-3 pr-4 py-2 border-l-4 text-base font-medium'\n}\n\nconst SiteMenu = (props) => {\n\n  return (\n    <Disclosure as=\"nav\" className=\"bg-white shadow-sm\">\n      {({ open }) => (\n        <>\n          <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"flex justify-between h-16\">\n              <div className=\"flex\">\n                <div className=\"flex-shrink-0 flex items-center\">\n                  <NavLink\n                    exact\n                    to='/'\n                    activeClassName='text-indigo-500'\n                    className='text-gray-500'\n                  >\n                    <ViewGridIcon className=\"block h-6 w-6\" />\n                  </NavLink>\n                </div>\n                <div className=\"hidden sm:-my-px sm:ml-6 sm:flex sm:space-x-8\">\n                  {navigation.map((item) => (\n                    <NavLink\n                      exact\n                      key={item.name}\n                      to={item.href}\n                      { ...navLinkClasses }\n                    >\n                      {item.name}\n                    </NavLink>\n                  ))}\n                </div>\n              </div>\n              <div className=\"hidden sm:ml-6 sm:flex sm:items-center\">\n                <NavLink\n                  exact\n                  to='/settings'\n                  activeClassName='text-indigo-500'\n                  className='text-gray-500'\n                >\n                  <AdjustmentsIcon className=\"block h-6 w-6\" />\n                </NavLink>\n              </div>\n              <div className=\"-mr-2 flex items-center sm:hidden\">\n                {/* Mobile menu button */}\n                <Disclosure.Button className=\"bg-white inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500\">\n                  <span className=\"sr-only\">Open main menu</span>\n                  {open ? (\n                    <XIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\n                  ) : (\n                    <MenuIcon className=\"block h-6 w-6\" aria-hidden=\"true\" />\n                  )}\n                </Disclosure.Button>\n              </div>\n            </div>\n          </div>\n\n          <Disclosure.Panel className=\"sm:hidden\">\n            <div className=\"pt-2 pb-3 space-y-1\">\n              {navigation.map((item) => (\n                <NavLink\n                  exact\n                  key={item.name}\n                  to={item.href}\n                  { ...navLinkClassesMobile }\n                >\n                  {item.name}\n                </NavLink>\n              ))}\n              <div>Settings</div>\n            </div>\n          </Disclosure.Panel>\n        </>\n      )}\n    </Disclosure>\n  )\n}\n\nexport default SiteMenu\n","import React from 'react';\n\nconst Dashboard = (props) => {\n\n  return (\n    <div className='class'>Dashboard...</div>\n  );\n}\n\nexport default Dashboard;\n","\n\nclass Scene {\n\n  constructor(name, height = 8, width = 8) {\n\n    this.name = name\n    this.height = height\n    this.width = width\n    this.spriteSheet = [\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n      [null, null, null, null, null, null, null, null],\n    ]\n  }\n\n\n}\n\nexport default Scene\n","import Scene from './Scene';\n\nclass Project {\n\n  constructor(name) {\n    this.name = name\n    this.initializeData()\n    this.initializeScenes()\n    this.initializeSprites()\n  }\n\n  initializeData() {\n    this.id = 'id10'\n    this.author = ''\n    this.created = Date.now()\n    this.updated = ''\n    this.palette = 'default'\n    this.scenes = []\n    this.sprites = []\n  }\n\n  initializeScenes() {\n    this.scenes = [\n      { ...new Scene('test scene', 8, 8) }\n    ]\n  }\n\n  initializeSprites() {\n    this.sprites = new Array(128)\n      .fill(null)\n      .map(() => [\n        ['00', '00', '00', '00', '00', '00', '00', '00'],\n        ['00', '00', '00', '00', '00', '00', '00', '00'],\n        ['00', '00', '00', '00', '00', '00', '00', '00'],\n        ['00', '00', '00', '00', '00', '00', '00', '00'],\n        ['00', '00', '00', '00', '00', '00', '00', '00'],\n        ['00', '00', '00', '00', '00', '00', '00', '00'],\n        ['00', '00', '00', '00', '00', '00', '00', '00'],\n        ['00', '00', '00', '00', '00', '00', '00', '00'],\n      ]);\n  }\n}\n\nexport default Project;\n","import React from 'react';\n\nimport { EMPTY_SPRITE } from '@/App.constants'\n\nimport styles from './Sprite.module.scss';\n\nconst Sprite = ({ sprite }) => {\n\n  if (sprite === null) {\n    sprite = [ ...EMPTY_SPRITE ]\n  }\n\n  return (\n    <div>\n      {sprite.map((row, rowIndex) => (\n        <div key={`${rowIndex}`} className={styles.row}>\n          {row.map((cell, cellIndex) => (\n            <div key={`${rowIndex}_${cellIndex}`} className={`color color--${cell ?? 'none'}`} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default React.memo(Sprite);\n","import React from 'react'\n\nimport Sprite from '@components/Sprite/Sprite.component'\n\nimport styles from './Scene.module.scss'\n\nconst Scene = ({ scene, sprites }) => {\n\n  return (\n    <div className='w-full'>\n      {scene.spriteSheet.map((row, rowIndex) => (\n        <div key={`${rowIndex}`} className={styles.row}>\n          {row.map((cell, cellIndex) => {\n            const sprite = cell === null ? null : sprites[cell.id]\n            return <Sprite key={`${rowIndex}_${cellIndex}`} sprite={sprite} />\n          })}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default React.memo(Scene)\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\nimport { PencilAltIcon, CogIcon } from '@heroicons/react/solid'\n\nimport { getProjectPaletteClass, getProjectScene, getProjectSprites } from '@store/projects/projects.slice'\nimport Scene from '@components/Scene/Scene.component'\n\nconst Project = ({ project }) => {\n  const paletteClass = useSelector(getProjectPaletteClass(project.id))\n  const scene = useSelector(getProjectScene(project.id, 0))\n  const sprites = useSelector(getProjectSprites(project.id))\n\n  return (\n    <div className={`${paletteClass} col-span-1 flex flex-col text-center bg-white shadow overflow-hidden divide-y divide-gray-200`}>\n      <div className='flex-1 flex flex-col'>\n        <h3 className='mt-6 text-gray-900 text-sm font-medium'>{project.name}</h3>\n        <dl className='mt-1 flex-grow flex flex-col justify-between'>\n          <dt className='sr-only'>Project Name</dt>\n          <dd className='text-gray-500 text-xs'>{project.id}</dd>\n          <dt className='sr-only'>ID</dt>\n          <dd className='mt-3'>\n            <Scene scene={scene} sprites={sprites} />\n          </dd>\n        </dl>\n      </div>\n      <div>\n        <div className='-mt-px flex divide-x divide-gray-200'>\n          <div className='w-0 flex-1 flex'>\n            <NavLink\n              exact\n              to={`/project/${project.id}/0/0`}\n              className='relative -mr-px w-0 flex-1 inline-flex items-center justify-center py-4 text-sm text-gray-700 font-medium border border-transparent rounded-bl-lg hover:text-gray-500'\n            >\n              <PencilAltIcon className='w-5 h-5 text-gray-400' aria-hidden='true' />\n              <span className='ml-3'>Open</span>\n            </NavLink>\n          </div>\n          <div className='-ml-px w-0 flex-1 flex'>\n            {/* <a\n              href={`/`}\n              className='relative w-0 flex-1 inline-flex items-center justify-center py-4 text-sm text-gray-700 font-medium border border-transparent rounded-br-lg hover:text-gray-500'\n            >\n              <CogIcon className='w-5 h-5 text-gray-400' aria-hidden='true' />\n              <span className='ml-3'>Settings</span>\n            </a> */}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Project\n","import { Fragment, useRef } from 'react'\nimport { Dialog, Transition } from '@headlessui/react'\nimport { CheckIcon } from '@heroicons/react/outline'\n\nconst Modal = ({ children, isOpen, setIsOpen, confirmHandler }) => {\n  const cancelButtonRef = useRef(null)\n\n  const onConfirmClick = () => {\n    setIsOpen(false)\n    confirmHandler()\n  }\n\n  return (\n    <Transition.Root show={isOpen} as={Fragment}>\n      <Dialog as=\"div\" className=\"fixed z-10 inset-0 overflow-y-auto\" initialFocus={cancelButtonRef} onClose={() => setIsOpen(false)}>\n        <div className=\"flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0\">\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0\"\n            enterTo=\"opacity-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100\"\n            leaveTo=\"opacity-0\"\n          >\n            <Dialog.Overlay className=\"fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity\" />\n          </Transition.Child>\n\n          {/* This element is to trick the browser into centering the modal contents. */}\n          <span className=\"hidden sm:inline-block sm:align-middle sm:h-screen\" aria-hidden=\"true\">\n            &#8203;\n          </span>\n          <Transition.Child\n            as={Fragment}\n            enter=\"ease-out duration-300\"\n            enterFrom=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n            enterTo=\"opacity-100 translate-y-0 sm:scale-100\"\n            leave=\"ease-in duration-200\"\n            leaveFrom=\"opacity-100 translate-y-0 sm:scale-100\"\n            leaveTo=\"opacity-0 translate-y-4 sm:translate-y-0 sm:scale-95\"\n          >\n            <div className=\"inline-block align-bottom bg-white px-4 pt-5 pb-4 text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full sm:p-6\">\n              <div>\n                {/* <div className=\"mx-auto flex items-center justify-center h-12 w-12 bg-green-100\">\n                  <CheckIcon className=\"h-6 w-6 text-green-600\" aria-hidden=\"true\" />\n                </div> */}\n                <div className=\"mt-3 text-center sm:mt-5\">\n                  <Dialog.Title as=\"h3\" className=\"text-lg leading-6 font-medium text-gray-900\">\n                    You sure?\n                  </Dialog.Title>\n                  <div className=\"mt-2\">\n                    {children}\n                  </div>\n                </div>\n              </div>\n              <div className=\"mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense\">\n                <button\n                  type=\"button\"\n                  className=\"w-full inline-flex justify-center border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm\"\n                  onClick={onConfirmClick}\n                >\n                  Confirm\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"mt-3 w-full inline-flex justify-center border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm\"\n                  onClick={() => setIsOpen(false)}\n                  ref={cancelButtonRef}\n                >\n                  Cancel\n                </button>\n              </div>\n            </div>\n          </Transition.Child>\n        </div>\n      </Dialog>\n    </Transition.Root>\n  )\n}\n\nexport default Modal\n","import React, { useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport NewProject from '../../data/Project'\n\nimport { getProjects, createNewProject } from '@store/projects/projects.slice'\nimport Project from './Project.component'\nimport Modal from '@components/Modal/Modal.component'\n\nconst Projects = (props) => {\n  const dispatch = useDispatch()\n  const projects = useSelector(getProjects)\n  const [isOpen, setIsOpen] = useState(false)\n  const [newProjectName, setNewProjectName] = useState('')\n\n  const handleCreateNewProjectConfirm = () => {\n    const newProject = new NewProject(newProjectName)\n    dispatch(createNewProject({ project: { ...newProject } }))\n    setNewProjectName('')\n  }\n\n  return (\n    <div>\n      <div className='grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 mb-4'>\n        {projects.map((project) => (\n          <Project key={project.id} project={project} />\n        ))}\n      </div>\n\n      <button\n        onClick={() => setIsOpen(true)}\n        type='button'\n        className='inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'\n      >\n        New\n      </button>\n\n      <Modal isOpen={isOpen} setIsOpen={setIsOpen} confirmHandler={handleCreateNewProjectConfirm}>\n        <form className='bg-white shadow mt-5 sm:flex sm:items-center'>\n          <div className='w-full sm:max-w-xs'>\n            <label htmlFor='email' className='sr-only'>\n              Name\n            </label>\n            <input\n              type='text'\n              name='new-project-name'\n              className='shadow-sm focus:ring-indigo-500 focus:border-indigo-500 block w-full sm:text-sm border-gray-300 rounded-md'\n              placeholder='Something COoOl'\n              value={newProjectName}\n              onChange={(e) => setNewProjectName(e.target.value)}\n            />\n          </div>\n          {/* <button\n            type='submit'\n            className='mt-3 w-full inline-flex items-center justify-center px-4 py-2 border border-transparent shadow-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm'\n          >\n            Save\n          </button> */}\n        </form>\n      </Modal>\n    </div>\n  )\n}\n\nexport default Projects\n","import { createSlice } from '@reduxjs/toolkit'\n\nimport { EMPTY_PROJECT } from '@/App.constants.js'\n\n// TODO this could cause a reference issue but here goes...\n\nconst initialState = {\n  ...EMPTY_PROJECT,\n  // id: null,\n  // name: 'DefaultText',\n  // palette: 'default',\n  // dateCreated: null,\n  // dateUpdated: null,\n  // dateLastOpened: null,\n  // sprites: [], //1-128\n  // scenes: [], //1-128\n  // // redoHistory: [], //in steps\n  // // undoHistory: [], //in steps\n}\n\nexport const currentProjectSlice = createSlice({\n  name: 'currentProject',\n  initialState: { ...initialState },\n  reducers: {\n    setSelectedProject(_, action) {\n      const { project } = action.payload\n      return project\n    },\n    setSelectedProjectName(state, action) {\n      const { value } = action.payload\n      state.name = value\n      state.dateUpdated = Date.now()\n    },\n    setSelectedProjectPalette(state, action) {\n      const { value } = action.payload\n      state.palette = value\n      state.dateUpdated = Date.now()\n    },\n    updateSelectedProjectSprite(state, action) {\n      const { index, sprite } = action.payload\n      state.sprites[index] = sprite\n      state.dateUpdated = Date.now()\n    },\n    updateSelectedProjectScene(state, action) {\n      const { index, scene } = action.payload\n      state.scenes[index] = scene\n      state.dateUpdated = Date.now()\n    },\n  },\n})\n\n// Actions\nexport const {\n  setSelectedProject,\n  setSelectedProjectName,\n  setSelectedProjectPalette,\n  updateSelectedProjectSprite,\n  updateSelectedProjectScene,\n} = currentProjectSlice.actions\n\n// Selectors\nexport const getSelectedProject = (state) => state.currentProject\nexport const getSelectedProjectId = (state) => state.currentProject.id\nexport const getSelectedProjectName = (state) => state.currentProject.name\nexport const getSelectedProjectPalette = (state) => state.currentProject.palette\nexport const getSelectedProjectPaletteClass = (state) => {\n  return `palette palette--${!state.currentProject.palette ? 'default' : state.currentProject.palette}`\n}\nexport const getSelectedProjectSprites = (state) => state.currentProject.sprites\nexport const getSelectedProjectSpriteByIndex = (index) => (state) => state.currentProject.sprites[index]\nexport const getSelectedProjectSpritesPaged = (page = 1, amount = 16) => (state) => {\n  return state.currentProject.sprites\n    .filter((_, index) => {\n      return index >= 0 && index <= (page * amount) - 1\n    })\n}\nexport const getSelectedProjectScenes = (state) => state.currentProject.scenes\nexport const getSelectedProjectScene = (index) => (state) => state.currentProject.scenes[index]\n\n\nexport default currentProjectSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nimport { SPRITE_TOOLS, COLOR_KEYS } from '@/App.constants'\n\nconst initialState = {\n  selectedTool: SPRITE_TOOLS.PENCIL,\n  selectedColor: COLOR_KEYS[0],\n  selectedSprite: [],\n  selectedSpriteIndex: 0,\n}\n\nexport const spriteEditorSlice = createSlice({\n  name: 'spriteEditor',\n  initialState: { ...initialState },\n  reducers: {\n    setSelectedTool(state, action) {\n      const { tool } = action.payload\n      state.selectedTool = tool\n    },\n    setSelectedColor(state, action) {\n      const { color } = action.payload\n      state.selectedColor = color\n    },\n    setSelectedSprite(state, action) {\n      const { sprite } = action.payload\n      state.selectedSprite = sprite\n    },\n    setSelectedSpriteIndex(state, action) {\n      const { spriteIndex } = action.payload\n      state.selectedSpriteIndex = spriteIndex\n    },\n    flipSpriteHorizontal(state) {\n      state.selectedSprite.forEach((row, index) => {\n        state.selectedSprite[index] = row.reverse()\n      })\n    },\n    flipSpriteVertical(state) {\n      state.selectedSprite.reverse()\n    },\n    moveSpriteUp(state) {\n      const firstRow = state.selectedSprite.shift()\n      state.selectedSprite.push(firstRow)\n    },\n    moveSpriteRight(state) {\n      state.selectedSprite.forEach(row => {\n        const lastCell = row.pop()\n        row.unshift(lastCell)\n      })\n    },\n    moveSpriteDown(state) {\n      const lastRow = state.selectedSprite.pop()\n      state.selectedSprite.unshift(lastRow)\n    },\n    moveSpriteLeft(state) {\n      state.selectedSprite.forEach(row => {\n        const firstCell = row.shift()\n        row.push(firstCell)\n      })\n    },\n    rotateSpriteRight(state) {\n      const tempSprite = state.selectedSprite.map(row => ([ ...row.map(cell => cell) ]))\n      state.selectedSprite.forEach((row, rowIndex) => {\n        row.forEach((cell, cellIndex) => {\n          tempSprite[cellIndex][state.selectedSprite.length - rowIndex - 1] = cell\n        })\n      })\n      state.selectedSprite = tempSprite\n    },\n    rotateSpriteLeft(state) {\n      const tempSprite = state.selectedSprite.map(row => ([ ...row.map(cell => cell) ]))\n      state.selectedSprite.forEach((row, rowIndex) => {\n        row.forEach((cell, cellIndex) => {\n          tempSprite[state.selectedSprite.length - cellIndex - 1][rowIndex] = cell\n        })\n      })\n      state.selectedSprite = tempSprite\n    },\n  },\n})\n\n// Actions\nexport const {\n  setSelectedTool,\n  setSelectedColor,\n  setSelectedSprite,\n  setSelectedSpriteIndex,\n  flipSpriteHorizontal,\n  flipSpriteVertical,\n  moveSpriteLeft,\n  moveSpriteUp,\n  moveSpriteRight,\n  moveSpriteDown,\n  rotateSpriteRight,\n  rotateSpriteLeft,\n} = spriteEditorSlice.actions\n\n// Selectors\nexport const getSelectedTool = (state) => state.spriteEditor.selectedTool\nexport const getSelectedColor = (state) => state.spriteEditor.selectedColor\nexport const getSelectedSprite = (state) => state.spriteEditor.selectedSprite\nexport const getSelectedSpriteIndex = (state) => state.spriteEditor.selectedSpriteIndex\n\nexport default spriteEditorSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nimport { SCENE_TOOLS, EMPTY_SCENE } from '@/App.constants'\n\nconst initialState = {\n  selectedTool: SCENE_TOOLS.MOVE,\n  selectedScene: { ...EMPTY_SCENE },\n  selectedSceneIndex: 0,\n}\n\nexport const sceneEditorSlice = createSlice({\n  name: 'sceneEditor',\n  initialState: { ...initialState },\n  reducers: {\n    setSelectedTool(state, action) {\n      const { tool } = action.payload\n      state.selectedTool = tool\n    },\n    setSelectedScene(state, action) {\n      const { scene } = action.payload\n      state.selectedScene = scene\n    },\n    setSelectedSceneIndex(state, action) {\n      const { sceneIndex } = action.payload\n      state.selectedSceneIndex = sceneIndex\n    },\n    updateSelectedSceneCell(state, action) {\n      const { row, column, value } = action.payload\n      state.selectedScene.spriteSheet[row][column] = value\n    },\n    flipSceneHorizontal(state) {\n      state.selectedScene.spriteSheet.forEach((row, index) => {\n        state.selectedScene.spriteSheet[index] = row.reverse()\n      })\n    },\n    flipSceneVertical(state) {\n      state.selectedScene.spriteSheet.reverse()\n    },\n    moveSceneLeft(state) {\n      state.selectedScene.spriteSheet.forEach(row => {\n        const firstCell = row.shift()\n        row.push(firstCell)\n      })\n    },\n    moveSceneUp(state) {\n      const firstRow = state.selectedScene.spriteSheet.shift()\n      state.selectedScene.spriteSheet.push(firstRow)\n    },\n    moveSceneRight(state) {\n      state.selectedScene.spriteSheet.forEach(row => {\n        const lastCell = row.pop()\n        row.unshift(lastCell)\n      })\n    },\n    moveSceneDown(state) {\n      const lastRow = state.selectedScene.spriteSheet.pop()\n      state.selectedScene.spriteSheet.unshift(lastRow)\n    },\n    clearSceneSprites(state) {\n      state.selectedScene.spriteSheet = state.selectedScene.spriteSheet\n        .map(row => {\n          return row.map(cell => {\n            return null\n          })\n        })\n    }\n  },\n})\n\n// Actions\nexport const {\n  setSelectedTool,\n  setSelectedScene,\n  setSelectedSceneIndex,\n  updateSelectedSceneCell,\n  flipSceneHorizontal,\n  flipSceneVertical,\n  moveSceneLeft,\n  moveSceneUp,\n  moveSceneRight,\n  moveSceneDown,\n  clearSceneSprites,\n} = sceneEditorSlice.actions\n\n// Selectors\nexport const getSelectedTool = (state) => state.sceneEditor.selectedTool\nexport const getSelectedScene = (state) => state.sceneEditor.selectedScene\nexport const getSelectedSceneName = (state) => state.sceneEditor.selectedScene.name\nexport const getSelectedSceneIndex = (state) => state.sceneEditor.selectedSceneIndex\n\nexport default sceneEditorSlice.reducer\n","import { setProjectPalette, updateProjectScene } from '@store/projects/projects.slice'\nimport { getSelectedProjectId, setSelectedProjectPalette, updateSelectedProjectSprite, updateSelectedProjectScene } from '@store/currentProject/currentProject.slice'\nimport { getSelectedSprite, getSelectedSpriteIndex } from '@store/spriteEditor/spriteEditor.slice'\nimport { getSelectedScene, getSelectedSceneIndex, updateSelectedSceneCell } from '@store/sceneEditor/sceneEditor.slice'\n\n// updateSelectedProjectScene\n\nexport const handleSpriteActionButton = (buttonAction) => {\n  return (dispatch, getState) => {\n    dispatch(buttonAction())\n    const sprite = getSelectedSprite(getState())\n    const spriteIndex = getSelectedSpriteIndex(getState())\n    dispatch(updateSelectedProjectSprite({index: spriteIndex, sprite}))\n  }\n}\n\nexport const handleSceneActionButton = (buttonAction) => {\n  return (dispatch, getState) => {\n    dispatch(buttonAction())\n    const scene = getSelectedScene(getState())\n    const sceneIndex = getSelectedSceneIndex(getState())\n    dispatch(updateSelectedProjectScene({index: sceneIndex, scene}))\n  }\n}\n\nexport const updateScene = (row, column, value) => {\n  return (dispatch, getState) => {\n    const projectId = getSelectedProjectId(getState())\n    dispatch(updateSelectedSceneCell(row, column, value))\n    const sceneIndex = getSelectedSceneIndex(getState())\n    const scene = getSelectedScene(getState())\n    dispatch(updateProjectScene({ projectId, sceneIndex, scene }))\n\n  }\n}\n\nexport const updateSprite = () => {\n  return (dispatch) => {\n    // TODO\n  }\n}\n\nexport const updatePalette = ({ palette }) => {\n  return (dispatch, getState) => {\n    const projectId = getSelectedProjectId(getState())\n    dispatch(setSelectedProjectPalette({ value: palette }))\n    dispatch(setProjectPalette({ projectId, value: palette }))\n  }\n}\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { updatePalette } from '@store/actions'\nimport { getSelectedProjectPalette } from '@store/currentProject/currentProject.slice'\n\nimport { PALETTE_LIST, COLOR_KEYS } from '@/App.constants.js'\n\nconst PaletteSelector = (props) => {\n  const dispatch = useDispatch()\n  const selectedPallete = useSelector(getSelectedProjectPalette)\n\n  const handlePaletteClick = palette => {\n    console.log('palette', palette)\n    dispatch(updatePalette({ palette }))\n  }\n\n  return (\n    <div className='palette-preview'>\n      <div className='flex content-center justify-between p-2 text-xs'>Palette: {selectedPallete}</div>\n      <div className='p-2 grid grid-cols-8 gap-2'>\n        {PALETTE_LIST.map(palette => {\n          return (\n            <div key={palette} className={`palette palette--${palette}`}>\n              <button onClick={() => handlePaletteClick(palette)} className='grid grid-cols-4 gap-0 w-full'>\n                {COLOR_KEYS.map(color => {\n                  return (\n                    <div key={color} className={`color color--${color}`} />\n                  )\n                })}\n              </button>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport default PaletteSelector\n","import React from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { insertProjectScene } from '@store/projects/projects.slice'\n\nconst NewSceneButton = ({ projectId }) => {\n  const dispatch = useDispatch()\n\n  const handleClick = () => {\n    dispatch(insertProjectScene({ projectId }))\n  }\n\n  return (\n    <button\n      onClick={handleClick}\n      type='button'\n      className='inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500'\n    >\n      New\n    </button>\n  )\n}\n\nexport default NewSceneButton\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { useSelector } from 'react-redux'\n\nimport { getSelectedProjectId, getSelectedProjectScenes, getSelectedProjectSprites, getSelectedProjectPaletteClass } from '@store/currentProject/currentProject.slice'\nimport Scene from '@components/Scene/Scene.component'\nimport NewSceneButton from './NewSceneButton.component'\n\nconst ScenesList = (props) => {\n  const projectId = useSelector(getSelectedProjectId)\n  const scenes = useSelector(getSelectedProjectScenes)\n  const sprites = useSelector(getSelectedProjectSprites)\n  const paletteClass = useSelector(getSelectedProjectPaletteClass)\n\n  return (\n    <div className={paletteClass}>\n      <div className='mb-4 flex flex-wrap'>\n        {scenes.map((scene, index) => {\n          return (\n            <div key={index} className='w-1/3 border-2'>\n              <NavLink\n                exact\n                to={`/project/${projectId}/${index}/0`}\n                className='w-full h-full block'\n              >\n                <Scene scene={scene} sprites={sprites} />\n              </NavLink>\n            </div>\n          )\n        })}\n      </div>\n      <NewSceneButton projectId={projectId} />\n    </div>\n  )\n}\n\nexport default ScenesList\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\n// import { SCENE_TOOLS } from '@/App.constants';\nimport { getSelectedTool, getSelectedSceneName } from '@store/sceneEditor/sceneEditor.slice';\n\nconst SceneInfoBar = ({ sceneIndex }) => {\n  const selectedTool = useSelector(getSelectedTool);\n  const sceneName = useSelector(getSelectedSceneName);\n\n  return (\n    <div className='flex content-center justify-between p-2 text-xs'>\n      <span>{sceneName} [{sceneIndex}/?]</span>\n      <span>{selectedTool} tool</span>\n    </div>\n  );\n}\n\nexport default SceneInfoBar;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { HandIcon, ArrowCircleDownIcon } from '@heroicons/react/outline';\n\nimport { SCENE_TOOLS } from '@/App.constants';\nimport { getSelectedTool, setSelectedTool } from '@store/sceneEditor/sceneEditor.slice';\n\nimport styles from './SceneEditorToolbar.module.scss';\n\nconst buttonClassesBase = 'relative inline-flex items-center px-4 py-2 text-sm font-medium';\nconst buttonClasses = `${buttonClassesBase} text-gray-800 bg-white hover:bg-gray-50`;\nconst buttonActiveClasses = `${buttonClassesBase} text-gray-50 bg-indigo-500 hover:bg-indigo-500 focus:z-10`;\nconst iconClasses = 'block h-5 w-5';\n\nconst SceneEditorToolbar = (props) => {\n  const dispatch = useDispatch();\n  const selectedTool = useSelector(getSelectedTool);\n\n  const buttons = [\n    {tool: SCENE_TOOLS.MOVE, icon: <HandIcon className={iconClasses} />},\n    {tool: SCENE_TOOLS.STAMP, icon: <ArrowCircleDownIcon className={iconClasses} />},\n  ];\n\n  const handleToolClick = tool => dispatch(setSelectedTool({tool}));\n\n  return (\n    <div className={styles.sceneEditorToolbar + ' w-full'}>\n      {buttons.map(button => {\n        return (\n          <button\n            key={button.tool}\n            type=\"button\"\n            className={button.tool === selectedTool ? buttonActiveClasses : buttonClasses}\n            onClick={() => handleToolClick(button.tool)}\n          >\n            {button.icon}\n          </button>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default SceneEditorToolbar;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { SwitchHorizontalIcon, SwitchVerticalIcon, ArrowSmUpIcon, ArrowSmRightIcon, ArrowSmDownIcon, ArrowSmLeftIcon, LightningBoltIcon } from '@heroicons/react/outline';\n\nimport { moveSceneUp, moveSceneRight, moveSceneDown, moveSceneLeft, flipSceneVertical, flipSceneHorizontal, clearSceneSprites } from '@store/sceneEditor/sceneEditor.slice';\nimport { handleSceneActionButton } from '@store/actions';\n\nimport styles from './SceneEditorActionbar.module.scss';\n\nconst buttonClassesBase = 'relative inline-flex items-center px-4 py-2 text-sm font-medium';\nconst buttonClasses = `${buttonClassesBase} text-gray-800 bg-white hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500`;\nconst iconClasses = 'block h-5 w-5';\n\nconst buttonAttributes = {\n  type: 'button',\n  className: buttonClasses,\n}\n\nconst SceneEditorActionbar = (props) => {\n  const dispatch = useDispatch();\n\n  const handleClick = (buttonAction) => {\n    dispatch(handleSceneActionButton(buttonAction));\n  }\n\n  return (\n    <div className={styles.sceneEditorActionbar + ' mb-2 w-full'}>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSceneLeft)}>\n        <ArrowSmLeftIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSceneRight)}>\n        <ArrowSmRightIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSceneUp)} >\n        <ArrowSmUpIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSceneDown)}>\n        <ArrowSmDownIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(flipSceneHorizontal)}>\n        <SwitchHorizontalIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(flipSceneVertical)}>\n        <SwitchVerticalIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(clearSceneSprites)}>\n        <LightningBoltIcon className={iconClasses} />\n      </button>\n    </div>\n  );\n}\n\nexport default SceneEditorActionbar;\n","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport { getSelectedProjectSpriteByIndex } from '@store/currentProject/currentProject.slice'\n\nimport styles from './Sprite.module.scss'\n\nconst Sprite = props => {\n  const {\n    spriteIndex,\n    isSelected = false,\n    isDraggable = true,\n    onClick = () => {},\n    onDoubleClick = () => {},\n    cursor = 'default',\n    rowIndex,\n    colIndex,\n  } = props\n\n  const sprite = useSelector(getSelectedProjectSpriteByIndex(spriteIndex))\n\n  const dragStartHandler = event => {\n    const draggingData = {\n      rowIndex,\n      colIndex,\n      sprite,\n      spritePoolIndex: spriteIndex\n    }\n    event.dataTransfer.setData('text/plain', JSON.stringify(draggingData))\n  }\n\n  const dragOverHandler = event => {\n    event.preventDefault()\n  }\n\n  const dropHandler = event => {\n    event.preventDefault()\n  }\n\n  const spriteHtml = sprite\n    .map((row, rowIndex) => (\n      <div key={rowIndex} className={styles.spriteRow}>\n        {row.map((cell, colIndex) => (\n          <div key={colIndex} className={`color color--${cell}`} onClick={() => onClick(spriteIndex)} />\n        ))}\n      </div>\n    ))\n\n  return (\n    <div\n      className={styles.sprite + (isSelected ? ' ' + styles.spriteSelected : '')}\n      style={{ cursor: cursor }}\n      draggable={isDraggable}\n      onDragStart={dragStartHandler}\n      onDragOver={dragOverHandler}\n      onDrop={dropHandler}\n      onDoubleClick={onDoubleClick}\n      onClick={onClick}\n    >\n      {spriteHtml}\n    </div>\n  )\n}\n\nexport default React.memo(Sprite)\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { SCENE_TOOLS } from '@/App.constants'\nimport { updateScene } from '@store/actions'\nimport { getSelectedSpriteIndex } from '@store/spriteEditor/spriteEditor.slice'\nimport Sprite from '@views/Project/Sprite/Sprite.component'\n\nconst Cell = (props) => {\n  const {\n    sprite,\n    rowIndex,\n    colIndex,\n    selectedTool,\n  } = props\n\n  const dispatch = useDispatch()\n\n  // TODO get selected spriteIndex from sprite list\n  const selectedSpriteIndex = useSelector(getSelectedSpriteIndex)\n\n  const dragOverHandler = event => {\n    event.preventDefault()\n  }\n\n  const dropHandler = event => {\n    event.preventDefault() \n    const passedData = JSON.parse(event.dataTransfer.getData('text'))\n\n    dispatch(updateScene({\n      row: rowIndex,\n      column: colIndex,\n      value: {id: passedData.spritePoolIndex},\n    }))\n\n    const hasValidRow = passedData.rowIndex !== null && passedData.rowIndex >= 0\n    const hasValidColumn = passedData.colIndex !== null && passedData.colIndex >= 0\n\n    // Remove sprite from grid\n    if (hasValidRow && hasValidColumn) {\n      if (rowIndex !== passedData.rowIndex || colIndex !== passedData.colIndex) {\n        dispatch(updateScene({\n          row: passedData.rowIndex,\n          column: passedData.colIndex,\n          value: null,\n        }))\n      }\n    }\n\n    // TODO Remove sprite from grid if dropped outside of grid\n    // setShowDeleteZone(false)\n    event.dataTransfer.clearData()\n  }\n\n  const cellClickHandler = () => {\n    if (selectedTool === SCENE_TOOLS.STAMP) {\n      dispatch(updateScene({\n        row: rowIndex,\n        column: colIndex,\n        value: {id: selectedSpriteIndex},\n      }))\n    }\n  }\n\n  const cursor = () => {\n    let cursorType = 'default'\n    if (selectedTool === SCENE_TOOLS.MOVE) {\n      cursorType = 'grab'\n    } else if (selectedTool === SCENE_TOOLS.STAMP) {\n      cursorType = 'cell'\n    }\n    return cursorType\n  }\n\n  return (\n    <div\n      onDragOver={dragOverHandler}\n      onDrop={dropHandler}\n      onMouseDown={cellClickHandler}\n    >\n      {sprite !== null && (\n        <Sprite\n          key={sprite.id}\n          spriteIndex={sprite.id}\n          rowIndex={rowIndex}\n          colIndex={colIndex}\n          cursor={cursor()}\n          isDraggable={selectedTool === SCENE_TOOLS.MOVE}\n        />\n      )}\n    </div>\n  )\n}\n\nexport default React.memo(Cell)\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getSelectedTool } from '@store/sceneEditor/sceneEditor.slice';\nimport Cell from './Cell.component';\n\nimport styles from './SceneEditor.module.scss';\n\nconst Grid = ({ scene }) => {\n  const selectedTool = useSelector(getSelectedTool);\n\n  return (\n    <div>\n      {scene.spriteSheet.map((row, rowIndex) => (\n        <div className={styles.sceneGridRow} key={rowIndex}>\n          {row.map((cellValue, colIndex) => (\n            <Cell\n              key={colIndex}\n              rowIndex={rowIndex}\n              colIndex={colIndex}\n              sprite={cellValue}\n              selectedTool={selectedTool}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default Grid;\n","import React, { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { getSelectedProjectScene, getSelectedProjectPaletteClass } from '@store/currentProject/currentProject.slice'\nimport { getSelectedScene, setSelectedScene, setSelectedSceneIndex } from '@store/sceneEditor/sceneEditor.slice'\nimport Grid from './Grid.component'\n\nimport styles from './SceneEditor.module.scss'\n\nconst SceneEditor = ({ sceneIndex }) => {\n  const dispatch = useDispatch()\n  // TODO this is really confusing. Make it simpler?\n  const projectScene = useSelector(getSelectedProjectScene(sceneIndex))\n  const selectedScene = useSelector(getSelectedScene)\n  const paletteClass = useSelector(getSelectedProjectPaletteClass)\n\n  useEffect(() => {\n    console.log('is this happening like it should bew?')\n    dispatch(setSelectedScene({ scene: projectScene }))\n    dispatch(setSelectedSceneIndex({ sceneIndex }))\n  }, [dispatch, projectScene, sceneIndex])\n\n  return (\n    <div className={styles.sceneGrid + ' bg-gray-100 bg-stripes bg-stripes-white mb-2'}>\n      <div className={paletteClass}>\n        <Grid scene={selectedScene} />\n      </div>\n    </div>\n  )\n}\n\nexport default SceneEditor\n","import React from 'react'\nimport { useHistory, useParams } from 'react-router'\nimport { useSelector } from 'react-redux'\n\nimport { SCENE_TOOLS } from '@/App.constants'\nimport { getSelectedProjectSpritesPaged, getSelectedProjectPaletteClass } from '@store/currentProject/currentProject.slice'\nimport { getSelectedSpriteIndex } from '@store/spriteEditor/spriteEditor.slice'\nimport { getSelectedTool } from '@store/sceneEditor/sceneEditor.slice'\nimport Sprite from '@views/Project/Sprite/Sprite.component'\n\nimport styles from './SpriteList.module.scss'\n\nconst SpriteList = (props) => {\n  const history = useHistory()\n  const { projectId, sceneIndex } = useParams()\n\n  const sprites = useSelector(getSelectedProjectSpritesPaged(1, 32))\n  const paletteClass = useSelector(getSelectedProjectPaletteClass)\n  const selectedSpriteIndex = useSelector(getSelectedSpriteIndex)\n  const selectedTool = useSelector(getSelectedTool)\n  // const [isMouseOver, setMouseIsOver] = useState(false)\n  // const [isHoveringAwhile, setIsHoveringAwhile] = useState(false)\n\n  // useEffect(() => {\n  //   let timer\n  //   if (isMouseOver) {\n  //     timer = setTimeout(() => {\n  //       // console.log('This will run after 1 second!')\n  //       setIsHoveringAwhile(true)\n  //     }, 1000)\n  //   } else {\n  //     clearTimeout(timer)\n  //     setIsHoveringAwhile(false)\n  //   }\n\n  //   return () => clearTimeout(timer)\n  // }, [isMouseOver])\n\n  // const dragOverHandler = event => {\n  //   setMouseIsOver(true)\n  //   event.preventDefault()\n  // }\n\n  // const dragLeaveHandler = () => {\n  //   setMouseIsOver(false)\n  //   setIsHoveringAwhile(false)\n  // }\n\n  const handleClick = (spriteIndex) => {\n    history.push(`/project/${projectId}/${sceneIndex}/${spriteIndex}`)\n  }\n\n  // TODO I guess we need to make 'cells' for this to drop things into?\n  //   onDragLeave={dragLeaveHandler}\n  //   onDragEnd={dragLeaveHandler}\n  //   onMouseOut={dragLeaveHandler}\n\n  // isHoveringAwhile ? 'border-dashed border-4 border-light-blue-500' : ''\n\n  return (\n    <div className={paletteClass}>\n      <div className={styles.spriteList}>\n        <div className={styles.spriteListRow}>\n          {sprites.map((_, spriteIndex) => (\n            <Sprite\n              key={spriteIndex}\n              spriteIndex={spriteIndex}\n              cursor={'pointer'}\n              isSelected={parseInt(spriteIndex) === parseInt(selectedSpriteIndex)}\n              isDraggable={selectedTool === SCENE_TOOLS.MOVE}\n              onClick={() => handleClick(spriteIndex)}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default SpriteList\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport { getSelectedTool } from '@store/spriteEditor/spriteEditor.slice';\nimport { parseString } from 'loader-utils';\n\nconst SpriteInfoBar = ({ spriteIndex }) => {\n  const selectedTool = useSelector(getSelectedTool);\n\n  const formattedIndex = () => {\n    const numericValue = parseInt(spriteIndex) + 1;\n\n    let value = numericValue;\n    if (numericValue < 10) {\n      value = '00' + parseString(numericValue);\n    } else if (numericValue < 100) {\n      value = '0' + parseString(numericValue);\n    }\n\n    return value;\n  }\n\n  return (\n    <div className='flex content-center justify-between p-2 text-xs'>\n      <span>[{formattedIndex()}/128]</span>\n      <span>{selectedTool} tool</span>\n    </div>\n  );\n}\n\nexport default SpriteInfoBar;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { PencilIcon, XIcon, BeakerIcon, EyeIcon } from '@heroicons/react/outline';\n\nimport { SPRITE_TOOLS } from '@/App.constants';\nimport { getSelectedTool, setSelectedTool } from '@store/spriteEditor/spriteEditor.slice';\n\nimport styles from './SpriteEditorToolbar.module.scss';\n\nconst buttonClassesBase = 'relative inline-flex items-center px-4 py-2 text-sm font-medium';\nconst buttonClasses = `${buttonClassesBase} text-gray-800 bg-white hover:bg-gray-50`;\nconst buttonActiveClasses = `${buttonClassesBase} text-gray-50 bg-indigo-500 hover:bg-indigo-500 focus:z-10`;\nconst iconClasses = 'block h-5 w-5';\n\nconst SpriteEditorToolbar = (props) => {\n  const dispatch = useDispatch();\n  const selectedTool = useSelector(getSelectedTool);\n\n  const buttons = [\n    {tool: SPRITE_TOOLS.PENCIL, icon: <PencilIcon className={iconClasses} />},\n    {tool: SPRITE_TOOLS.ERASER, icon: <XIcon className={iconClasses} />},\n    {tool: SPRITE_TOOLS.FILL, icon: <BeakerIcon className={iconClasses} />},\n    {tool: SPRITE_TOOLS.COLOR_SAMPLE, icon: <EyeIcon className={iconClasses} />},\n  ];\n\n  const handleToolClick = tool => dispatch(setSelectedTool({tool}));\n\n  return (\n    <div className={styles.spriteEditorToolbar + ' w-full'}>\n      {buttons.map(button => {\n        return (\n          <button\n            key={button.tool}\n            type=\"button\"\n            className={button.tool === selectedTool ? buttonActiveClasses : buttonClasses}\n            onClick={() => handleToolClick(button.tool)}\n          >\n            {button.icon}\n          </button>\n        )\n      })}\n    </div>\n  );\n}\n\nexport default SpriteEditorToolbar;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { SwitchHorizontalIcon, SwitchVerticalIcon, ArrowSmUpIcon, ArrowSmRightIcon, ArrowSmDownIcon, ArrowSmLeftIcon, ReplyIcon } from '@heroicons/react/outline';\n\nimport { moveSpriteUp,moveSpriteRight, moveSpriteDown, moveSpriteLeft, flipSpriteVertical, flipSpriteHorizontal, rotateSpriteRight, rotateSpriteLeft } from '@store/spriteEditor/spriteEditor.slice';\nimport { handleSpriteActionButton } from '@store/actions';\n\nimport styles from './SpriteEditorActionbar.module.scss';\n\nconst buttonClassesBase = 'relative inline-flex items-center px-4 py-2 text-sm font-medium';\nconst buttonClasses = `${buttonClassesBase} text-gray-800 bg-white hover:bg-gray-50 focus:z-10 focus:outline-none focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500`;\nconst iconClasses = 'block h-5 w-5';\n\nconst buttonAttributes = {\n  type: 'button',\n  className: buttonClasses\n}\n\nconst SpriteEditorActionbar = (props) => {\n  const dispatch = useDispatch();\n\n  const handleClick = (buttonAction) => {\n    dispatch(handleSpriteActionButton(buttonAction));\n  }\n\n  return (\n    <div className={styles.spriteEditorActionbar + ' w-full mb-2'}>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSpriteLeft)}>\n        <ArrowSmLeftIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSpriteRight)}>\n        <ArrowSmRightIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSpriteUp)} >\n        <ArrowSmUpIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(moveSpriteDown)}>\n        <ArrowSmDownIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(flipSpriteHorizontal)}>\n        <SwitchHorizontalIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(flipSpriteVertical)}>\n        <SwitchVerticalIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(rotateSpriteLeft)}>\n        <ReplyIcon className={iconClasses} />\n      </button>\n      <button {...buttonAttributes} onClick={() => handleClick(rotateSpriteRight)}>\n        <ReplyIcon className={iconClasses} style={{transform: 'scaleX(-1)'}} /> \n      </button>\n    </div>\n  );\n}\n\nexport default SpriteEditorActionbar;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { SPRITE_TOOLS } from '@/App.constants';\nimport { setSelectedColor } from '@store/spriteEditor/spriteEditor.slice';\n\nconst Cell = (props) => {\n  const {\n    rowIndex,\n    colIndex,\n    colorKey,\n    selectedTool,\n    mouseIsDown,\n    clickHandler,\n  } = props;\n\n  const dispatch = useDispatch();\n\n  const cellClickHandler = () => {\n    if (selectedTool === SPRITE_TOOLS.COLOR_SAMPLE) {\n      dispatch(setSelectedColor({color: colorKey}));\n      return;\n    }\n    clickHandler(rowIndex, colIndex);\n  }\n\n  const mouseEnterHandler = () => {\n    if (selectedTool === SPRITE_TOOLS.COLOR_SAMPLE && mouseIsDown) {\n      dispatch(setSelectedColor({color: colorKey}));\n      return;\n    }\n    if (mouseIsDown) {\n      clickHandler(rowIndex, colIndex);\n    }\n  }\n\n  return (\n    <button\n      className={`color color--${colorKey}`}\n      onMouseDown={() => cellClickHandler()}\n      onMouseEnter={() => mouseEnterHandler()}\n    />\n  );\n}\n\nexport default React.memo(Cell);\n","import React, { useCallback, useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\n\nimport { SPRITE_TOOLS } from '@/App.constants'\nimport { getSelectedProjectSpriteByIndex, updateSelectedProjectSprite, getSelectedProjectPaletteClass } from '@store/currentProject/currentProject.slice'\nimport { getSelectedSprite, setSelectedSprite, setSelectedSpriteIndex, getSelectedTool, getSelectedColor } from '@store/spriteEditor/spriteEditor.slice'\nimport Cell from './Cell.component'\n\nimport styles from './SpriteEditor.module.scss'\n\nconst SpriteEditor = ({ spriteIndex }) => {\n  const dispatch = useDispatch()\n  const projectSprite = useSelector(getSelectedProjectSpriteByIndex(spriteIndex))\n  const selectedSprite = useSelector(getSelectedSprite)\n  const selectedTool = useSelector(getSelectedTool)\n  const selectedColor = useSelector(getSelectedColor)\n  const paletteClass = useSelector(getSelectedProjectPaletteClass)\n\n  const [mouseDown, setMouseDown] = useState(false)\n  const [labeledGrid, updateLabeledGrid] = useState([])\n\n  const updateCellValues = (rowIndex, colIndex) => {\n    const updatedGrid = selectedSprite.map(row => ([ ...row.map(cell => cell) ]))\n\n    if (selectedTool === SPRITE_TOOLS.PENCIL) {\n      updatedGrid[rowIndex][colIndex] = selectedColor\n    } else if (selectedTool === SPRITE_TOOLS.FILL) {\n      const cellLabelValue = labeledGrid[rowIndex][colIndex]\n      labeledGrid.forEach((row, labeledRowIndex) => {\n        row.forEach((colValue, labeledColIndex) => {                   \n          if (colValue === cellLabelValue) {\n            updatedGrid[labeledRowIndex][labeledColIndex] = selectedColor\n          }\n        })\n      })\n    } else if (selectedTool === SPRITE_TOOLS.ERASER) {\n      updatedGrid[rowIndex][colIndex] = null\n    } else {\n      return\n    }\n\n    dispatch(setSelectedSprite({ sprite: updatedGrid }))\n  }\n\n  const scanForGridRegions = useCallback(() => {\n    const labeledGrid = []\n    const groups = []\n\n    // Label cells in preliminary groups\n    selectedSprite.forEach((row, rowIndex) => {\n      labeledGrid[rowIndex] = []\n\n      row.forEach((colValue, colIndex) => {\n        const westValue = colIndex > 0 ? selectedSprite[rowIndex][colIndex - 1] : -1\n        const northValue = rowIndex > 0 ? selectedSprite[rowIndex - 1][colIndex] : -1\n        const westLabel = colIndex > 0 ? labeledGrid[rowIndex][colIndex - 1] : -1\n        const northLabel = rowIndex > 0 ? labeledGrid[rowIndex - 1][colIndex] : -1\n\n        if (colValue === westValue) {\n          if (colValue === northValue && westLabel !== northLabel) {\n            const min = Math.min(westLabel, northLabel)\n            const max = Math.max(westLabel, northLabel)\n            // TODO revisit this as it is incomplete ???\n            const lowestMatchedIndex = groups.findIndex(subSet => subSet.has(min))\n            groups[lowestMatchedIndex].add(max)\n            groups[max] = groups[lowestMatchedIndex]\n            labeledGrid[rowIndex][colIndex] = min\n          } else {\n            labeledGrid[rowIndex][colIndex] = westLabel\n          }\n        }\n\n        if (colValue !== westValue) {\n          if (colValue === northValue) {\n            labeledGrid[rowIndex][colIndex] = northLabel\n          } else {\n            const newGroup = new Set()\n            newGroup.add(groups.length)\n            groups.push(newGroup)\n            labeledGrid[rowIndex][colIndex] = groups.length - 1\n          }\n        }\n      })\n    })\n\n    // Group equivalents\n    const processedLabeledGrid = labeledGrid.map(row => {\n      return row.map(colValue => {\n        const setArray = []\n        groups[colValue].forEach(value => {\n          setArray.push(value)\n        })\n        const minValue = Math.min(...setArray)\n        return minValue\n      })\n    })\n\n    updateLabeledGrid(processedLabeledGrid)\n  }, [selectedSprite])\n\n  useEffect(() => {\n    dispatch(setSelectedSprite({ sprite: projectSprite }))\n    dispatch(setSelectedSpriteIndex({ spriteIndex }))\n  }, [dispatch, projectSprite, spriteIndex])\n\n  useEffect(() => {\n    scanForGridRegions()\n  }, [scanForGridRegions, selectedSprite])\n\n  const Cells = selectedSprite\n    .map((row, rowIndex) => {\n      return (\n        <div className={styles.spriteGridRow} key={rowIndex}>\n          {row.map((cellValue, colIndex) => {\n            return (\n              <Cell\n                key={`r${rowIndex}-c${colIndex}`}\n                rowIndex={rowIndex}\n                colIndex={colIndex}\n                colorKey={cellValue}\n                selectedColorKey={selectedColor}\n                selectedTool={selectedTool}\n                mouseIsDown={mouseDown}\n                clickHandler={updateCellValues} \n              />\n            )\n          })}\n        </div>\n      )\n    })\n\n  const handleMouseLeave = () => {\n    if (mouseDown) {\n      dispatch(updateSelectedProjectSprite({index: spriteIndex, sprite: selectedSprite}))\n    }\n    setMouseDown(false)\n  }\n\n  return (\n    <div className={paletteClass + ' mb-2'}>\n      <div\n        className={styles.spriteGrid}\n        onMouseLeave={handleMouseLeave}\n        onMouseDown={() => setMouseDown(true)}\n        onMouseUp={() => {\n          setMouseDown(false)\n          dispatch(updateSelectedProjectSprite({index: spriteIndex, sprite: selectedSprite}))\n        }}\n      >\n        {Cells}\n      </div>\n    </div>\n  )\n}\n\nexport default React.memo(SpriteEditor)\n","import React from 'react';\n\nimport styles from './Cell.module.scss';\n\nconst Cell = (props) => {\n  const {\n    value,\n    isSelected = false,\n    onClick\n  } = props;\n\n  return (\n    <button\n      className={`color color--${value} ${styles.cell}` + (isSelected ? ' ' + styles.cellSelected : '')}\n      onClick={() => onClick(value)}\n    />\n  );\n}\n\nexport default Cell;\n","import React, { useEffect, useRef, useState } from 'react';\nimport chroma from 'chroma-js';\n\nimport { ColorSwatchIcon } from '@heroicons/react/outline';\n\nconst InfoBar = ({ selectedColor, paletteClass }) => {\n  const cellRef = useRef(null);\n  const [colorHex, setColorHex] = useState('');\n  const [colorRgb, setColorRgb] = useState('');\n  const [isDarkColor, setIsDarkColor] = useState(false);\n\n  useEffect(() => {\n    const style = window.getComputedStyle(cellRef.current);\n    const rgbColor = style.backgroundColor;\n    const hex = chroma(rgbColor).hex();\n    const rgb = chroma(rgbColor).css();\n    const lum = chroma(rgbColor).luminance();\n\n    setColorHex(hex);\n    setColorRgb(rgb);\n    setIsDarkColor(lum < .45);\n  }, [selectedColor, paletteClass]);\n\n  const textColorClass = isDarkColor ? 'text-white' : 'text-black';\n\n  return (\n    <div\n      className={`flex flex-1 items-start h-1/4 p-2 text-xs font-mono color color--${selectedColor} ${textColorClass}`}\n      ref={cellRef}\n    >\n      <ColorSwatchIcon className='block h-5 w-5 mr-2' /> c{selectedColor} | {colorHex} | {colorRgb}\n    </div>\n  );\n}\n\nexport default InfoBar;\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { COLOR_KEYS } from '@/App.constants';\nimport { getSelectedProjectPaletteClass } from '@store/currentProject/currentProject.slice';\nimport { getSelectedColor, setSelectedColor } from '@store/spriteEditor/spriteEditor.slice';\nimport Cell from './Cell.component';\nimport InfoBar from './InfoBar.component';\n\nimport styles from './ColorSelector.module.scss';\n\nconst SpriteEditor = (props) => {\n  const dispatch = useDispatch();\n  const paletteClass = useSelector(getSelectedProjectPaletteClass);\n  const selectedColor = useSelector(getSelectedColor);\n\n  const handleColorClick = (colorKey) => {\n    dispatch(setSelectedColor({color: colorKey}));\n  }\n\n  return (\n    <div className={paletteClass + ' flex-1 flex flex-col'}>\n      <div className='bg-white'>\n        <div className={styles.colorGrid}>\n          {COLOR_KEYS.map((key, index) => {\n            return (\n              <Cell\n                key={index}\n                value={key}\n                paletteClass={paletteClass}\n                isSelected={key === selectedColor}\n                onClick={handleColorClick}\n              />\n            )\n          })}\n        </div>\n      </div>\n      <InfoBar selectedColor={selectedColor} paletteClass={paletteClass} />\n    </div>\n  );\n}\n\nexport default SpriteEditor;\n","import React, { useEffect, Fragment } from 'react'\nimport { useParams } from 'react-router'\nimport { useDispatch, useSelector } from 'react-redux'\n// import ReactJson from 'react-json-view'\n\nimport { getProjectById } from '@store/projects/projects.slice'\nimport { setSelectedProject, getSelectedProjectName } from '@store/currentProject/currentProject.slice'\n\nimport PaletteSelector from '@views/Project/PaletteSelector/PaletteSelector.component'\nimport ScenesList from '@views/Project/ScenesList/ScenesList.component'\nimport SceneInfoBar from '@views/Project/SceneInfoBar/SceneInfoBar.component'\nimport SceneEditorToolbar from '@views/Project/SceneEditorToolbar/SpriteEditorToolbar.component'\nimport SceneEditorActionbar from '@views/Project/SceneEditorActionbar/SceneEditorActionbar.component'\nimport SceneEditor from '@views/Project/SceneEditor/SceneEditor.component'\nimport SpriteList from '@views/Project/SpriteList/SpriteList.component'\nimport SpriteInfoBar from '@views/Project/SpriteInfoBar/SpriteInfoBar.component'\nimport SpriteEditorToolbar from '@views/Project/SpriteEditorToolbar/SpriteEditorToolbar.component'\nimport SpriteEditorActionbar from '@views/Project/SpriteEditorActionbar/SpriteEditorActionbar.component'\nimport SpriteEditor from '@views/Project/SpriteEditor/SpriteEditor.component'\nimport ColorSelector from '@views/Project/ColorSelector/ColorSelector.component'\n\nimport { Menu, Transition } from '@headlessui/react'\nimport { CogIcon } from '@heroicons/react/solid'\n\nconst Project = (props) => {\n  const { projectId, sceneIndex = 0, spriteIndex = 0 } = useParams()\n  const dispatch = useDispatch()\n  const project = useSelector(getProjectById(projectId))\n  const projectName = useSelector(getSelectedProjectName)\n\n  useEffect(() => {\n    dispatch(setSelectedProject({ project }))\n  }, [dispatch, project])\n\n  return (\n    <div>\n      <div className='relative mt-2 grid grid-cols-1 gap-0 mb-5'>\n        <div className='bg-white shadow flex justify-between items-center'>\n          <div className='bg-gray-50 px-5 py-3'>\n            '{projectName}' / ID:{projectId}\n          </div>\n\n          <Menu as='div' className='inline-block lg:hidden  text-left h-full'>\n            <Menu.Button className='h-full inline-flex justify-center items-center w-32 px-4 py-2 bg-white text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-indigo-500'>\n              Settings\n              <CogIcon className='-mr-1 ml-2 h-5 w-5' aria-hidden='true' />\n            </Menu.Button>\n\n            <Transition\n              as={Fragment}\n              enter='transition ease-out duration-100'\n              enterFrom='transform opacity-0 scale-95'\n              enterTo='transform opacity-100 scale-100'\n              leave='transition ease-in duration-75'\n              leaveFrom='transform opacity-100 scale-100'\n              leaveTo='transform opacity-0 scale-95'\n            >\n              <Menu.Items className='origin-top-right absolute right-0 mt-2 w-full shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none z-10'>\n                <div className='py-1'>\n                  <div className='bg-white mb-5'>\n                    <PaletteSelector />\n                  </div>\n                </div>\n              </Menu.Items>\n            </Transition>\n          </Menu>\n        </div>\n      </div>\n\n      <div className='grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3'>\n        <div className='bg-white shadow hidden lg:block'>\n          <PaletteSelector />\n          <ScenesList />\n        </div>\n        <div className='flex flex-col bg-white'>\n          <div className='shadow'>\n            <SceneInfoBar sceneIndex={sceneIndex} />\n            <div className='bg-indigo-100 bg-stripes bg-stripes-white shadow-sm'>\n              <SceneEditorToolbar />\n              <SceneEditorActionbar />\n            </div>\n          </div>\n          <SceneEditor sceneIndex={sceneIndex} />\n          <SpriteList />\n        </div>\n        <div className='flex flex-col bg-white'>\n          <div className='shadow'>\n            <SpriteInfoBar spriteIndex={spriteIndex} />\n            <div className='bg-indigo-100 bg-stripes bg-stripes-white shadow-sm'>\n              <SpriteEditorToolbar />\n              <SpriteEditorActionbar />\n            </div>\n          </div>\n          <SpriteEditor spriteIndex={spriteIndex} />\n          <ColorSelector />\n        </div>\n      </div>\n\n      {/* <div className='mt-2 grid grid-cols-1 gap-5 sm:grid-cols-2 lg:grid-cols-3'>\n        <ReactJson src={JSON.parse(JSON.stringify(project))} />\n      </div> */}\n    </div>\n  )\n}\n\nexport default Project\n","import React from 'react';\n\nconst Settings = (props) => {\n\n  return (\n    <div className='class'>Settings...</div>\n  );\n}\n\nexport default Settings;\n","import React, { useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { Switch, Route } from \"react-router-dom\"\n\nimport { setProjects } from '@store/projects/projects.slice'\nimport SiteMenu from '@components/layout/NavBar.component'\nimport Dashboard from '@views/Dashboard/Dashboard.component'\nimport Projects from '@views/Projects/Projects.component'\nimport Project from '@views/Project/Project.component'\nimport Settings from '@views/Settings/Settings.component'\n\nimport mockProjects from './__mocks__/MOCK_PROJECTS.json'\n\nimport './App.css'\nimport './styles/styles.scss'\n\nconst routes = [\n  // { path: '/project/:projectKey/scene/:sceneId/edit', component: SceneEditor },\n  // { path: '/project/:projectKey/scene/:sceneId/export', component: SceneExporter },\n  { path: '/project/:projectId/:sceneIndex/:spriteIndex', component: Project },\n  { path: '/project/:projectId', component: Project },\n  { path: '/projects', component: Projects },\n  { path: '/settings', component: Settings },\n  { path: '/', component: Dashboard },\n]\n\nfunction App() {\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    // TODO clean this up\n    dispatch(setProjects({ projects: mockProjects }))\n    // return () => {\n    //   cleanup\n    // }\n  }, [dispatch])\n\n  return (\n    <div className=\"App bg-gradient-to-r from-gray-200 via-gray-100 to-gray-300\">\n      <div className=\"min-h-screen\">\n        <SiteMenu />\n        <div className=\"py-10\">\n          <main>\n            <div className=\"max-w-7xl mx-auto sm:px-6 lg:px-8\">\n              <div className=\"px-4 sm:px-0\">\n                <Switch>\n                  {routes.map(route => <Route key={route.path} path={route.path} component={route.component} />)}\n                </Switch>\n              </div>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { configureStore } from '@reduxjs/toolkit'\nimport logger from 'redux-logger'\n\nimport projectsSlice from '@store/projects/projects.slice'\nimport currentProjectSlice from '@store/currentProject/currentProject.slice'\nimport sceneEditorSlice from '@store/sceneEditor/sceneEditor.slice'\nimport spriteEditorSlice from '@store/spriteEditor/spriteEditor.slice'\n\nexport const store = configureStore({\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(logger),\n  reducer: {\n    projects: projectsSlice,\n    currentProject: currentProjectSlice,\n    sceneEditor: sceneEditorSlice,\n    spriteEditor: spriteEditorSlice,\n  },\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './store/store';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sceneGrid\":\"SceneEditor_sceneGrid__2enL9\",\"sceneGridRow\":\"SceneEditor_sceneGridRow__oE_Hy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sprite\":\"Sprite_sprite__2NRZ1\",\"spriteSelected\":\"Sprite_spriteSelected__1703B\",\"spriteRow\":\"Sprite_spriteRow__3VFP1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spriteList\":\"SpriteList_spriteList__2lyn2\",\"spriteListRow\":\"SpriteList_spriteListRow__9FoYX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"spriteGrid\":\"SpriteEditor_spriteGrid__1q-wX\",\"spriteGridRow\":\"SpriteEditor_spriteGridRow__1lQ88\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cell\":\"Cell_cell__23LI3\",\"cellSelected\":\"Cell_cellSelected__-78BU\"};"],"sourceRoot":""}